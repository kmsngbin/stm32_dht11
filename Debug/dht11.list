
dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000377c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039dc  080039dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039e4  080039e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003a5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003a5c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d85c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2f  00000000  00000000  0002d8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  000303c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c8  00000000  00000000  00030f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2d4  00000000  00000000  00048260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2b1  00000000  00000000  00056534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e57e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c38  00000000  00000000  000e5838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003904 	.word	0x08003904

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003904 	.word	0x08003904

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DelayUs>:

extern TIM_HandleTypeDef htim1;

// us단위의 지연시간
void DelayUs(uint32_t us)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	// 타이머 1번을 0으로 초기화
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <DelayUs+0x2c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2200      	movs	r2, #0
 8000592:	625a      	str	r2, [r3, #36]	; 0x24
	// 타이머 1번이 1MHz의 클럭을 입력 받아 증가할때 us보다 커지면 루프 중단
	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 8000594:	bf00      	nop
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <DelayUs+0x2c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d8f9      	bhi.n	8000596 <DelayUs+0x12>
		;
}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <DHT11_Start>:
	while ((__HAL_TIM_GET_COUNTER(&htim1) < us) && value)
		;
}

void DHT11_Start()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
	{ 0 };
	// output mode
	GPIO_InitStruct.Pin = dht11_Pin;
 80005c8:	2301      	movs	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(dht11_GPIO_Port, &GPIO_InitStruct);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <DHT11_Start+0x5c>)
 80005de:	f000 fd07 	bl	8000ff0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(dht11_GPIO_Port, dht11_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2101      	movs	r1, #1
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <DHT11_Start+0x5c>)
 80005e8:	f000 fe9e 	bl	8001328 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 80005ec:	2012      	movs	r0, #18
 80005ee:	f000 fbf5 	bl	8000ddc <HAL_Delay>
	// input mode
	GPIO_InitStruct.Pin = dht11_Pin;
 80005f2:	2301      	movs	r3, #1
 80005f4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(dht11_GPIO_Port, &GPIO_InitStruct);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4619      	mov	r1, r3
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <DHT11_Start+0x5c>)
 8000604:	f000 fcf4 	bl	8000ff0 <HAL_GPIO_Init>
}
 8000608:	bf00      	nop
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40020800 	.word	0x40020800

08000614 <DHT11_CheckResponse>:

uint8_t DHT11_CheckResponse()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]
	DelayUs(40);
 800061e:	2028      	movs	r0, #40	; 0x28
 8000620:	f7ff ffb0 	bl	8000584 <DelayUs>
	if (!HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin))
 8000624:	2101      	movs	r1, #1
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <DHT11_CheckResponse+0x58>)
 8000628:	f000 fe66 	bl	80012f8 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d10e      	bne.n	8000650 <DHT11_CheckResponse+0x3c>
	{
		DelayUs(80);
 8000632:	2050      	movs	r0, #80	; 0x50
 8000634:	f7ff ffa6 	bl	8000584 <DelayUs>
		if (HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin))
 8000638:	2101      	movs	r1, #1
 800063a:	480c      	ldr	r0, [pc, #48]	; (800066c <DHT11_CheckResponse+0x58>)
 800063c:	f000 fe5c 	bl	80012f8 <HAL_GPIO_ReadPin>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <DHT11_CheckResponse+0x38>
			Response = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	e001      	b.n	8000650 <DHT11_CheckResponse+0x3c>
		else
			Response = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	71fb      	strb	r3, [r7, #7]
	}
	while (HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin))
 8000650:	bf00      	nop
 8000652:	2101      	movs	r1, #1
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <DHT11_CheckResponse+0x58>)
 8000656:	f000 fe4f 	bl	80012f8 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f8      	bne.n	8000652 <DHT11_CheckResponse+0x3e>
		;
	return Response;
 8000660:	79fb      	ldrb	r3, [r7, #7]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40020800 	.word	0x40020800

08000670 <DHT11_Read>:

uint8_t DHT11_Read()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8000676:	2300      	movs	r3, #0
 8000678:	71bb      	strb	r3, [r7, #6]
 800067a:	e037      	b.n	80006ec <DHT11_Read+0x7c>
	{
		while (!HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin))
 800067c:	bf00      	nop
 800067e:	2101      	movs	r1, #1
 8000680:	481e      	ldr	r0, [pc, #120]	; (80006fc <DHT11_Read+0x8c>)
 8000682:	f000 fe39 	bl	80012f8 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0f8      	beq.n	800067e <DHT11_Read+0xe>
			;
		DelayUs(40);
 800068c:	2028      	movs	r0, #40	; 0x28
 800068e:	f7ff ff79 	bl	8000584 <DelayUs>
		if (!HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin))
 8000692:	2101      	movs	r1, #1
 8000694:	4819      	ldr	r0, [pc, #100]	; (80006fc <DHT11_Read+0x8c>)
 8000696:	f000 fe2f 	bl	80012f8 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10e      	bne.n	80006be <DHT11_Read+0x4e>
		{
			i &= ~(1 << (7 - j));
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2201      	movs	r2, #1
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	43db      	mvns	r3, r3
 80006b0:	b25a      	sxtb	r2, r3
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	4013      	ands	r3, r2
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	e00b      	b.n	80006d6 <DHT11_Read+0x66>
		}
		else
			i |= (1 << (7 - j));
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	f1c3 0307 	rsb	r3, r3, #7
 80006c4:	2201      	movs	r2, #1
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	71fb      	strb	r3, [r7, #7]
		while (HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin))
 80006d6:	bf00      	nop
 80006d8:	2101      	movs	r1, #1
 80006da:	4808      	ldr	r0, [pc, #32]	; (80006fc <DHT11_Read+0x8c>)
 80006dc:	f000 fe0c 	bl	80012f8 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f8      	bne.n	80006d8 <DHT11_Read+0x68>
	for (j = 0; j < 8; j++)
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	3301      	adds	r3, #1
 80006ea:	71bb      	strb	r3, [r7, #6]
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d9c4      	bls.n	800067c <DHT11_Read+0xc>
			;
	}
	return i;
 80006f2:	79fb      	ldrb	r3, [r7, #7]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020800 	.word	0x40020800

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000706:	f000 faf7 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070a:	f000 f835 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f000 f90b 	bl	8000928 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000712:	f000 f88f 	bl	8000834 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000716:	f000 f8dd 	bl	80008d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <main+0x70>)
 800071c:	f001 fac6 	bl	8001cac <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	// Read sensor data
  	DHT11_Start();
 8000720:	f7ff ff48 	bl	80005b4 <DHT11_Start>
  	DHT11_CheckResponse();
 8000724:	f7ff ff76 	bl	8000614 <DHT11_CheckResponse>
  	uint8_t data[5];
  	for(int i = 0; i < 5; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e00b      	b.n	8000746 <main+0x46>
  		data[i] = DHT11_Read();
 800072e:	f7ff ff9f 	bl	8000670 <DHT11_Read>
 8000732:	4603      	mov	r3, r0
 8000734:	4619      	mov	r1, r3
 8000736:	1d3a      	adds	r2, r7, #4
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	460a      	mov	r2, r1
 800073e:	701a      	strb	r2, [r3, #0]
  	for(int i = 0; i < 5; i++)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3301      	adds	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b04      	cmp	r3, #4
 800074a:	ddf0      	ble.n	800072e <main+0x2e>
  	// 5 Bytes.
  	// [humidity over dot] [humidity under dot] [temp over dot] [temp under dot] [check sum : sum]
  	// calculate position
  	printf("H%d.%d T%d.%d\n", data[0], data[1], data[2], data[3]);
 800074c:	793b      	ldrb	r3, [r7, #4]
 800074e:	4619      	mov	r1, r3
 8000750:	797b      	ldrb	r3, [r7, #5]
 8000752:	461a      	mov	r2, r3
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	4618      	mov	r0, r3
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4603      	mov	r3, r0
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <main+0x74>)
 8000760:	f002 f942 	bl	80029e8 <iprintf>
  	HAL_Delay(1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000768:	f000 fb38 	bl	8000ddc <HAL_Delay>
  {
 800076c:	e7d8      	b.n	8000720 <main+0x20>
 800076e:	bf00      	nop
 8000770:	2000008c 	.word	0x2000008c
 8000774:	0800391c 	.word	0x0800391c

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f002 f926 	bl	80029d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <SystemClock_Config+0xb4>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <SystemClock_Config+0xb4>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <SystemClock_Config+0xb4>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <SystemClock_Config+0xb8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <SystemClock_Config+0xb8>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <SystemClock_Config+0xb8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fdb7 	bl	800135c <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007f4:	f000 f8e6 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f81a 	bl	800184c <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800081e:	f000 f8d1 	bl	80009c4 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	; 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	463b      	mov	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_TIM1_Init+0x98>)
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <MX_TIM1_Init+0x9c>)
 8000854:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_TIM1_Init+0x98>)
 8000858:	220f      	movs	r2, #15
 800085a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_TIM1_Init+0x98>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_TIM1_Init+0x98>)
 8000864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000868:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_TIM1_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_TIM1_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_TIM1_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800087c:	4813      	ldr	r0, [pc, #76]	; (80008cc <MX_TIM1_Init+0x98>)
 800087e:	f001 f9c5 	bl	8001c0c <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000888:	f000 f89c 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_TIM1_Init+0x98>)
 800089a:	f001 fa61 	bl	8001d60 <HAL_TIM_ConfigClockSource>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008a4:	f000 f88e 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_TIM1_Init+0x98>)
 80008b6:	f001 fc35 	bl	8002124 <HAL_TIMEx_MasterConfigSynchronization>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008c0:	f000 f880 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000008c 	.word	0x2000008c
 80008d0:	40010000 	.word	0x40010000

080008d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART1_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 800090c:	f001 fc78 	bl	8002200 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f855 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000d4 	.word	0x200000d4
 8000924:	40011000 	.word	0x40011000

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_GPIO_Init+0x94>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <MX_GPIO_Init+0x94>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_GPIO_Init+0x94>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_GPIO_Init+0x94>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a16      	ldr	r2, [pc, #88]	; (80009bc <MX_GPIO_Init+0x94>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_GPIO_Init+0x94>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dht11_GPIO_Port, dht11_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2101      	movs	r1, #1
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_GPIO_Init+0x98>)
 800097c:	f000 fcd4 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : dht11_Pin */
  GPIO_InitStruct.Pin = dht11_Pin;
 8000980:	2301      	movs	r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dht11_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	480a      	ldr	r0, [pc, #40]	; (80009c0 <MX_GPIO_Init+0x98>)
 8000998:	f000 fb2a 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800099c:	2302      	movs	r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0x98>)
 80009b0:	f000 fb1e 	bl	8000ff0 <HAL_GPIO_Init>

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020800 	.word	0x40020800

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <HAL_TIM_Base_MspInit+0x3c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d10d      	bne.n	8000a4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_TIM_Base_MspInit+0x40>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <HAL_TIM_Base_MspInit+0x40>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <HAL_TIM_Base_MspInit+0x40>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40010000 	.word	0x40010000
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_UART_MspInit+0x84>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d12c      	bne.n	8000ae0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000abe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_UART_MspInit+0x8c>)
 8000adc:	f000 fa88 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f92c 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e00a      	b.n	8000b70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b5a:	f3af 8000 	nop.w
 8000b5e:	4601      	mov	r1, r0
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf0      	blt.n	8000b5a <_read+0x12>
  }

  return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000baa:	605a      	str	r2, [r3, #4]
  return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <_isatty>:

int _isatty(int file)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f001 feb2 	bl	8002984 <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20020000 	.word	0x20020000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	20000118 	.word	0x20000118
 8000c54:	20000130 	.word	0x20000130

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <_write>:
	return result;
}

// printf를 uart로 실행시키는 함수.
int _write(int file, char *p, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 1);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <_write+0x24>)
 8000c92:	f001 fb02 	bl	800229a <HAL_UART_Transmit>
	return len;
 8000c96:	687b      	ldr	r3, [r7, #4]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200000d4 	.word	0x200000d4

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffc3 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f001 fe5d 	bl	8002990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fd13 	bl	8000700 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ce8:	080039ec 	.word	0x080039ec
  ldr r2, =_sbss
 8000cec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf0:	20000130 	.word	0x20000130

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f931 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	200f      	movs	r0, #15
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe50 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f93b 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f911 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	2000011c 	.word	0x2000011c

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000011c 	.word	0x2000011c

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff47 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff5c 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff8e 	bl	8000edc <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5d 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffb0 	bl	8000f44 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	e159      	b.n	80012c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800100c:	2201      	movs	r2, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	429a      	cmp	r2, r3
 8001026:	f040 8148 	bne.w	80012ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d005      	beq.n	8001042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	2b02      	cmp	r3, #2
 8001040:	d130      	bne.n	80010a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	f003 0201 	and.w	r2, r3, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d017      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d123      	bne.n	8001134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	08da      	lsrs	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3208      	adds	r2, #8
 80010f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	69b9      	ldr	r1, [r7, #24]
 8001130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0203 	and.w	r2, r3, #3
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a2 	beq.w	80012ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a56      	ldr	r2, [pc, #344]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001192:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a49      	ldr	r2, [pc, #292]	; (80012e0 <HAL_GPIO_Init+0x2f0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0x202>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a48      	ldr	r2, [pc, #288]	; (80012e4 <HAL_GPIO_Init+0x2f4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x1fe>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a47      	ldr	r2, [pc, #284]	; (80012e8 <HAL_GPIO_Init+0x2f8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x1fa>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a46      	ldr	r2, [pc, #280]	; (80012ec <HAL_GPIO_Init+0x2fc>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x1f6>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a45      	ldr	r2, [pc, #276]	; (80012f0 <HAL_GPIO_Init+0x300>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x1f2>
 80011de:	2304      	movs	r3, #4
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_GPIO_Init+0x304>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128a:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_GPIO_Init+0x304>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_GPIO_Init+0x304>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f aea2 	bls.w	800100c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e001      	b.n	800131a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	041a      	lsls	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	619a      	str	r2, [r3, #24]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e267      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d075      	beq.n	8001466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137a:	4b88      	ldr	r3, [pc, #544]	; (800159c <HAL_RCC_OscConfig+0x240>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b04      	cmp	r3, #4
 8001384:	d00c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001386:	4b85      	ldr	r3, [pc, #532]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138e:	2b08      	cmp	r3, #8
 8001390:	d112      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001392:	4b82      	ldr	r3, [pc, #520]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800139e:	d10b      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	4b7e      	ldr	r3, [pc, #504]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d05b      	beq.n	8001464 <HAL_RCC_OscConfig+0x108>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d157      	bne.n	8001464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e242      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d106      	bne.n	80013d0 <HAL_RCC_OscConfig+0x74>
 80013c2:	4b76      	ldr	r3, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a75      	ldr	r2, [pc, #468]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0xb0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x98>
 80013da:	4b70      	ldr	r3, [pc, #448]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a6f      	ldr	r2, [pc, #444]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b6d      	ldr	r3, [pc, #436]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a6c      	ldr	r2, [pc, #432]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xb0>
 80013f4:	4b69      	ldr	r3, [pc, #420]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a68      	ldr	r2, [pc, #416]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b66      	ldr	r3, [pc, #408]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a65      	ldr	r2, [pc, #404]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fcd6 	bl	8000dc4 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fcd2 	bl	8000dc4 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e207      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b5b      	ldr	r3, [pc, #364]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0xc0>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fcc2 	bl	8000dc4 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fcbe 	bl	8000dc4 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1f3      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	4b51      	ldr	r3, [pc, #324]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0xe8>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d063      	beq.n	800153a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001472:	4b4a      	ldr	r3, [pc, #296]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147e:	4b47      	ldr	r3, [pc, #284]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001486:	2b08      	cmp	r3, #8
 8001488:	d11c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148a:	4b44      	ldr	r3, [pc, #272]	; (800159c <HAL_RCC_OscConfig+0x240>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	4b41      	ldr	r3, [pc, #260]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x152>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e1c7      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b3b      	ldr	r3, [pc, #236]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4937      	ldr	r1, [pc, #220]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	e03a      	b.n	800153a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <HAL_RCC_OscConfig+0x244>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff fc77 	bl	8000dc4 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fc73 	bl	8000dc4 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e1a8      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4925      	ldr	r1, [pc, #148]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_RCC_OscConfig+0x244>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fc56 	bl	8000dc4 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fc52 	bl	8000dc4 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e187      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d036      	beq.n	80015b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d016      	beq.n	800157c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_RCC_OscConfig+0x248>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fc36 	bl	8000dc4 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fc32 	bl	8000dc4 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e167      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x200>
 800157a:	e01b      	b.n	80015b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_RCC_OscConfig+0x248>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff fc1f 	bl	8000dc4 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	e00e      	b.n	80015a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fc1b 	bl	8000dc4 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d907      	bls.n	80015a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e150      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
 800159c:	40023800 	.word	0x40023800
 80015a0:	42470000 	.word	0x42470000
 80015a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a8:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80015aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1ea      	bne.n	800158a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 8097 	beq.w	80016f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c6:	4b81      	ldr	r3, [pc, #516]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10f      	bne.n	80015f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b7d      	ldr	r3, [pc, #500]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a7c      	ldr	r2, [pc, #496]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b7a      	ldr	r3, [pc, #488]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ee:	2301      	movs	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b77      	ldr	r3, [pc, #476]	; (80017d0 <HAL_RCC_OscConfig+0x474>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d118      	bne.n	8001630 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	4b74      	ldr	r3, [pc, #464]	; (80017d0 <HAL_RCC_OscConfig+0x474>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a73      	ldr	r2, [pc, #460]	; (80017d0 <HAL_RCC_OscConfig+0x474>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160a:	f7ff fbdb 	bl	8000dc4 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001612:	f7ff fbd7 	bl	8000dc4 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e10c      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b6a      	ldr	r3, [pc, #424]	; (80017d0 <HAL_RCC_OscConfig+0x474>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x2ea>
 8001638:	4b64      	ldr	r3, [pc, #400]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	4a63      	ldr	r2, [pc, #396]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6713      	str	r3, [r2, #112]	; 0x70
 8001644:	e01c      	b.n	8001680 <HAL_RCC_OscConfig+0x324>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b05      	cmp	r3, #5
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x30c>
 800164e:	4b5f      	ldr	r3, [pc, #380]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a5e      	ldr	r2, [pc, #376]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a5b      	ldr	r2, [pc, #364]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0x324>
 8001668:	4b58      	ldr	r3, [pc, #352]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800166a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166c:	4a57      	ldr	r2, [pc, #348]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6713      	str	r3, [r2, #112]	; 0x70
 8001674:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	4a54      	ldr	r2, [pc, #336]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800167a:	f023 0304 	bic.w	r3, r3, #4
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d015      	beq.n	80016b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fb9c 	bl	8000dc4 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff fb98 	bl	8000dc4 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e0cb      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0ee      	beq.n	8001690 <HAL_RCC_OscConfig+0x334>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff fb86 	bl	8000dc4 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	f7ff fb82 	bl	8000dc4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0b5      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d2:	4b3e      	ldr	r3, [pc, #248]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ee      	bne.n	80016bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e4:	4b39      	ldr	r3, [pc, #228]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	4a38      	ldr	r2, [pc, #224]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80016ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80a1 	beq.w	800183c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016fa:	4b34      	ldr	r3, [pc, #208]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	d05c      	beq.n	80017c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d141      	bne.n	8001792 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_RCC_OscConfig+0x478>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fb56 	bl	8000dc4 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff fb52 	bl	8000dc4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e087      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	019b      	lsls	r3, r3, #6
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	3b01      	subs	r3, #1
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	491b      	ldr	r1, [pc, #108]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x478>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fb2b 	bl	8000dc4 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fb27 	bl	8000dc4 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e05c      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x416>
 8001790:	e054      	b.n	800183c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_RCC_OscConfig+0x478>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fb14 	bl	8000dc4 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff fb10 	bl	8000dc4 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e045      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x444>
 80017be:	e03d      	b.n	800183c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d107      	bne.n	80017d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e038      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40007000 	.word	0x40007000
 80017d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x4ec>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d028      	beq.n	8001838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d121      	bne.n	8001838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d11a      	bne.n	8001838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001808:	4013      	ands	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800180e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001810:	4293      	cmp	r3, r2
 8001812:	d111      	bne.n	8001838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	3b01      	subs	r3, #1
 8001822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d107      	bne.n	8001838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0cc      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d90c      	bls.n	8001888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b8      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	494d      	ldr	r1, [pc, #308]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d044      	beq.n	800196c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d119      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e07f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d003      	beq.n	800190a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001906:	2b03      	cmp	r3, #3
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e06f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e067      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 0203 	bic.w	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4934      	ldr	r1, [pc, #208]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800193c:	f7ff fa42 	bl	8000dc4 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	e00a      	b.n	800195a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f7ff fa3e 	bl	8000dc4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e04f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 020c 	and.w	r2, r3, #12
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	429a      	cmp	r2, r3
 800196a:	d1eb      	bne.n	8001944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d20c      	bcs.n	8001994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e032      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4916      	ldr	r1, [pc, #88]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d2:	f000 f821 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	490a      	ldr	r1, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	5ccb      	ldrb	r3, [r1, r3]
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f9a2 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	0800392c 	.word	0x0800392c
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a1c:	b090      	sub	sp, #64	; 0x40
 8001a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
 8001a24:	2300      	movs	r3, #0
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d00d      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x40>
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	f200 80a1 	bhi.w	8001b84 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x34>
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a4a:	e09b      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a50:	e09b      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a52:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a56:	e098      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a58:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a62:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d028      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	2200      	movs	r2, #0
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	627a      	str	r2, [r7, #36]	; 0x24
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a80:	2100      	movs	r1, #0
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a84:	fb03 f201 	mul.w	r2, r3, r1
 8001a88:	2300      	movs	r3, #0
 8001a8a:	fb00 f303 	mul.w	r3, r0, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a43      	ldr	r2, [pc, #268]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a92:	fba0 1202 	umull	r1, r2, r0, r2
 8001a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a98:	460a      	mov	r2, r1
 8001a9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a9e:	4413      	add	r3, r2
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	61fa      	str	r2, [r7, #28]
 8001aaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ab2:	f7fe fbe5 	bl	8000280 <__aeabi_uldivmod>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4613      	mov	r3, r2
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001abe:	e053      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac0:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	617a      	str	r2, [r7, #20]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ad2:	f04f 0b00 	mov.w	fp, #0
 8001ad6:	4652      	mov	r2, sl
 8001ad8:	465b      	mov	r3, fp
 8001ada:	f04f 0000 	mov.w	r0, #0
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	0159      	lsls	r1, r3, #5
 8001ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae8:	0150      	lsls	r0, r2, #5
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	ebb2 080a 	subs.w	r8, r2, sl
 8001af2:	eb63 090b 	sbc.w	r9, r3, fp
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b0a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b0e:	eb63 0509 	sbc.w	r5, r3, r9
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	00eb      	lsls	r3, r5, #3
 8001b1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b20:	00e2      	lsls	r2, r4, #3
 8001b22:	4614      	mov	r4, r2
 8001b24:	461d      	mov	r5, r3
 8001b26:	eb14 030a 	adds.w	r3, r4, sl
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	eb45 030b 	adc.w	r3, r5, fp
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b3e:	4629      	mov	r1, r5
 8001b40:	028b      	lsls	r3, r1, #10
 8001b42:	4621      	mov	r1, r4
 8001b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b48:	4621      	mov	r1, r4
 8001b4a:	028a      	lsls	r2, r1, #10
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b52:	2200      	movs	r2, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	60fa      	str	r2, [r7, #12]
 8001b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b5c:	f7fe fb90 	bl	8000280 <__aeabi_uldivmod>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4613      	mov	r3, r2
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	3301      	adds	r3, #1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b82:	e002      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3740      	adds	r7, #64	; 0x40
 8001b90:	46bd      	mov	sp, r7
 8001b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	017d7840 	.word	0x017d7840

08001ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000

08001bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bc0:	f7ff fff0 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0a9b      	lsrs	r3, r3, #10
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	0800393c 	.word	0x0800393c

08001be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001be8:	f7ff ffdc 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0b5b      	lsrs	r3, r3, #13
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	0800393c 	.word	0x0800393c

08001c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e041      	b.n	8001ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fef4 	bl	8000a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f000 f950 	bl	8001ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d001      	beq.n	8001cc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e03c      	b.n	8001d3e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <HAL_TIM_Base_Start+0xa0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d018      	beq.n	8001d08 <HAL_TIM_Base_Start+0x5c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cde:	d013      	beq.n	8001d08 <HAL_TIM_Base_Start+0x5c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <HAL_TIM_Base_Start+0xa4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00e      	beq.n	8001d08 <HAL_TIM_Base_Start+0x5c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_TIM_Base_Start+0xa8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d009      	beq.n	8001d08 <HAL_TIM_Base_Start+0x5c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_TIM_Base_Start+0xac>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d004      	beq.n	8001d08 <HAL_TIM_Base_Start+0x5c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <HAL_TIM_Base_Start+0xb0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d111      	bne.n	8001d2c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d010      	beq.n	8001d3c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2a:	e007      	b.n	8001d3c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40000800 	.word	0x40000800
 8001d58:	40000c00 	.word	0x40000c00
 8001d5c:	40014000 	.word	0x40014000

08001d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_TIM_ConfigClockSource+0x1c>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e0b4      	b.n	8001ee6 <HAL_TIM_ConfigClockSource+0x186>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db4:	d03e      	beq.n	8001e34 <HAL_TIM_ConfigClockSource+0xd4>
 8001db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dba:	f200 8087 	bhi.w	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc2:	f000 8086 	beq.w	8001ed2 <HAL_TIM_ConfigClockSource+0x172>
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dca:	d87f      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001dcc:	2b70      	cmp	r3, #112	; 0x70
 8001dce:	d01a      	beq.n	8001e06 <HAL_TIM_ConfigClockSource+0xa6>
 8001dd0:	2b70      	cmp	r3, #112	; 0x70
 8001dd2:	d87b      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001dd4:	2b60      	cmp	r3, #96	; 0x60
 8001dd6:	d050      	beq.n	8001e7a <HAL_TIM_ConfigClockSource+0x11a>
 8001dd8:	2b60      	cmp	r3, #96	; 0x60
 8001dda:	d877      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001ddc:	2b50      	cmp	r3, #80	; 0x50
 8001dde:	d03c      	beq.n	8001e5a <HAL_TIM_ConfigClockSource+0xfa>
 8001de0:	2b50      	cmp	r3, #80	; 0x50
 8001de2:	d873      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d058      	beq.n	8001e9a <HAL_TIM_ConfigClockSource+0x13a>
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d86f      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001dec:	2b30      	cmp	r3, #48	; 0x30
 8001dee:	d064      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x15a>
 8001df0:	2b30      	cmp	r3, #48	; 0x30
 8001df2:	d86b      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d060      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x15a>
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d867      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d05c      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x15a>
 8001e00:	2b10      	cmp	r3, #16
 8001e02:	d05a      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x15a>
 8001e04:	e062      	b.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f000 f965 	bl	80020e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	609a      	str	r2, [r3, #8]
      break;
 8001e32:	e04f      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6899      	ldr	r1, [r3, #8]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f000 f94e 	bl	80020e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e56:	609a      	str	r2, [r3, #8]
      break;
 8001e58:	e03c      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6859      	ldr	r1, [r3, #4]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	461a      	mov	r2, r3
 8001e68:	f000 f8c2 	bl	8001ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2150      	movs	r1, #80	; 0x50
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f91b 	bl	80020ae <TIM_ITRx_SetConfig>
      break;
 8001e78:	e02c      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	461a      	mov	r2, r3
 8001e88:	f000 f8e1 	bl	800204e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2160      	movs	r1, #96	; 0x60
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f90b 	bl	80020ae <TIM_ITRx_SetConfig>
      break;
 8001e98:	e01c      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f000 f8a2 	bl	8001ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2140      	movs	r1, #64	; 0x40
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f8fb 	bl	80020ae <TIM_ITRx_SetConfig>
      break;
 8001eb8:	e00c      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f000 f8f2 	bl	80020ae <TIM_ITRx_SetConfig>
      break;
 8001eca:	e003      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed0:	e000      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a34      	ldr	r2, [pc, #208]	; (8001fd4 <TIM_Base_SetConfig+0xe4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00f      	beq.n	8001f28 <TIM_Base_SetConfig+0x38>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0e:	d00b      	beq.n	8001f28 <TIM_Base_SetConfig+0x38>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <TIM_Base_SetConfig+0xe8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <TIM_Base_SetConfig+0x38>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a30      	ldr	r2, [pc, #192]	; (8001fdc <TIM_Base_SetConfig+0xec>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d003      	beq.n	8001f28 <TIM_Base_SetConfig+0x38>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <TIM_Base_SetConfig+0xf0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d108      	bne.n	8001f3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <TIM_Base_SetConfig+0xe4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01b      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d017      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <TIM_Base_SetConfig+0xe8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a21      	ldr	r2, [pc, #132]	; (8001fdc <TIM_Base_SetConfig+0xec>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00f      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <TIM_Base_SetConfig+0xf0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <TIM_Base_SetConfig+0xf4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <TIM_Base_SetConfig+0xf8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <TIM_Base_SetConfig+0xfc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <TIM_Base_SetConfig+0xe4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d103      	bne.n	8001fc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	615a      	str	r2, [r3, #20]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40000800 	.word	0x40000800
 8001fe0:	40000c00 	.word	0x40000c00
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800

08001ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f023 0201 	bic.w	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f023 030a 	bic.w	r3, r3, #10
 800202c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	621a      	str	r2, [r3, #32]
}
 8002042:	bf00      	nop
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800204e:	b480      	push	{r7}
 8002050:	b087      	sub	sp, #28
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	f023 0210 	bic.w	r2, r3, #16
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	031b      	lsls	r3, r3, #12
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800208a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	621a      	str	r2, [r3, #32]
}
 80020a2:	bf00      	nop
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f043 0307 	orr.w	r3, r3, #7
 80020d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	609a      	str	r2, [r3, #8]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	021a      	lsls	r2, r3, #8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	431a      	orrs	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	bf00      	nop
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002138:	2302      	movs	r3, #2
 800213a:	e050      	b.n	80021de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d018      	beq.n	80021b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002188:	d013      	beq.n	80021b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00e      	beq.n	80021b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d009      	beq.n	80021b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a13      	ldr	r2, [pc, #76]	; (80021fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10c      	bne.n	80021cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40010000 	.word	0x40010000
 80021f0:	40000400 	.word	0x40000400
 80021f4:	40000800 	.word	0x40000800
 80021f8:	40000c00 	.word	0x40000c00
 80021fc:	40014000 	.word	0x40014000

08002200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e03f      	b.n	8002292 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fc1c 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2224      	movs	r2, #36	; 0x24
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f929 	bl	800249c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b08a      	sub	sp, #40	; 0x28
 800229e:	af02      	add	r7, sp, #8
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d17c      	bne.n	80023b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HAL_UART_Transmit+0x2c>
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e075      	b.n	80023b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_UART_Transmit+0x3e>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e06e      	b.n	80023b6 <HAL_UART_Transmit+0x11c>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2221      	movs	r2, #33	; 0x21
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ee:	f7fe fd69 	bl	8000dc4 <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	88fa      	ldrh	r2, [r7, #6]
 80022f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	88fa      	ldrh	r2, [r7, #6]
 80022fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002308:	d108      	bne.n	800231c <HAL_UART_Transmit+0x82>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d104      	bne.n	800231c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e003      	b.n	8002324 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800232c:	e02a      	b.n	8002384 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2200      	movs	r2, #0
 8002336:	2180      	movs	r1, #128	; 0x80
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f840 	bl	80023be <UART_WaitOnFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e036      	b.n	80023b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800235c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	3302      	adds	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	e007      	b.n	8002376 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	3301      	adds	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1cf      	bne.n	800232e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	2140      	movs	r1, #64	; 0x40
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f810 	bl	80023be <UART_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e006      	b.n	80023b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b090      	sub	sp, #64	; 0x40
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	4613      	mov	r3, r2
 80023cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ce:	e050      	b.n	8002472 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d6:	d04c      	beq.n	8002472 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d007      	beq.n	80023ee <UART_WaitOnFlagUntilTimeout+0x30>
 80023de:	f7fe fcf1 	bl	8000dc4 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d241      	bcs.n	8002472 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	330c      	adds	r3, #12
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	e853 3f00 	ldrex	r3, [r3]
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	330c      	adds	r3, #12
 800240c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800240e:	637a      	str	r2, [r7, #52]	; 0x34
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002412:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002416:	e841 2300 	strex	r3, r2, [r1]
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1e5      	bne.n	80023ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3314      	adds	r3, #20
 8002428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	e853 3f00 	ldrex	r3, [r3]
 8002430:	613b      	str	r3, [r7, #16]
   return(result);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3314      	adds	r3, #20
 8002440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002442:	623a      	str	r2, [r7, #32]
 8002444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002446:	69f9      	ldr	r1, [r7, #28]
 8002448:	6a3a      	ldr	r2, [r7, #32]
 800244a:	e841 2300 	strex	r3, r2, [r1]
 800244e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1e5      	bne.n	8002422 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e00f      	b.n	8002492 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4013      	ands	r3, r2
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	429a      	cmp	r2, r3
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	429a      	cmp	r2, r3
 800248e:	d09f      	beq.n	80023d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3740      	adds	r7, #64	; 0x40
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800249c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a0:	b0c0      	sub	sp, #256	; 0x100
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	68d9      	ldr	r1, [r3, #12]
 80024ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	ea40 0301 	orr.w	r3, r0, r1
 80024c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	431a      	orrs	r2, r3
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024f4:	f021 010c 	bic.w	r1, r1, #12
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002502:	430b      	orrs	r3, r1
 8002504:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002516:	6999      	ldr	r1, [r3, #24]
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	ea40 0301 	orr.w	r3, r0, r1
 8002522:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b8f      	ldr	r3, [pc, #572]	; (8002768 <UART_SetConfig+0x2cc>)
 800252c:	429a      	cmp	r2, r3
 800252e:	d005      	beq.n	800253c <UART_SetConfig+0xa0>
 8002530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b8d      	ldr	r3, [pc, #564]	; (800276c <UART_SetConfig+0x2d0>)
 8002538:	429a      	cmp	r2, r3
 800253a:	d104      	bne.n	8002546 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800253c:	f7ff fb52 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 8002540:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002544:	e003      	b.n	800254e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002546:	f7ff fb39 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 800254a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800254e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002558:	f040 810c 	bne.w	8002774 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800255c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002560:	2200      	movs	r2, #0
 8002562:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002566:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800256a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800256e:	4622      	mov	r2, r4
 8002570:	462b      	mov	r3, r5
 8002572:	1891      	adds	r1, r2, r2
 8002574:	65b9      	str	r1, [r7, #88]	; 0x58
 8002576:	415b      	adcs	r3, r3
 8002578:	65fb      	str	r3, [r7, #92]	; 0x5c
 800257a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800257e:	4621      	mov	r1, r4
 8002580:	eb12 0801 	adds.w	r8, r2, r1
 8002584:	4629      	mov	r1, r5
 8002586:	eb43 0901 	adc.w	r9, r3, r1
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800259a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259e:	4690      	mov	r8, r2
 80025a0:	4699      	mov	r9, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	eb18 0303 	adds.w	r3, r8, r3
 80025a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025ac:	462b      	mov	r3, r5
 80025ae:	eb49 0303 	adc.w	r3, r9, r3
 80025b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025ca:	460b      	mov	r3, r1
 80025cc:	18db      	adds	r3, r3, r3
 80025ce:	653b      	str	r3, [r7, #80]	; 0x50
 80025d0:	4613      	mov	r3, r2
 80025d2:	eb42 0303 	adc.w	r3, r2, r3
 80025d6:	657b      	str	r3, [r7, #84]	; 0x54
 80025d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025e0:	f7fd fe4e 	bl	8000280 <__aeabi_uldivmod>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4b61      	ldr	r3, [pc, #388]	; (8002770 <UART_SetConfig+0x2d4>)
 80025ea:	fba3 2302 	umull	r2, r3, r3, r2
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	011c      	lsls	r4, r3, #4
 80025f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002600:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	1891      	adds	r1, r2, r2
 800260a:	64b9      	str	r1, [r7, #72]	; 0x48
 800260c:	415b      	adcs	r3, r3
 800260e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002610:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002614:	4641      	mov	r1, r8
 8002616:	eb12 0a01 	adds.w	sl, r2, r1
 800261a:	4649      	mov	r1, r9
 800261c:	eb43 0b01 	adc.w	fp, r3, r1
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800262c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002634:	4692      	mov	sl, r2
 8002636:	469b      	mov	fp, r3
 8002638:	4643      	mov	r3, r8
 800263a:	eb1a 0303 	adds.w	r3, sl, r3
 800263e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002642:	464b      	mov	r3, r9
 8002644:	eb4b 0303 	adc.w	r3, fp, r3
 8002648:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800264c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002658:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800265c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002660:	460b      	mov	r3, r1
 8002662:	18db      	adds	r3, r3, r3
 8002664:	643b      	str	r3, [r7, #64]	; 0x40
 8002666:	4613      	mov	r3, r2
 8002668:	eb42 0303 	adc.w	r3, r2, r3
 800266c:	647b      	str	r3, [r7, #68]	; 0x44
 800266e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002672:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002676:	f7fd fe03 	bl	8000280 <__aeabi_uldivmod>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4611      	mov	r1, r2
 8002680:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <UART_SetConfig+0x2d4>)
 8002682:	fba3 2301 	umull	r2, r3, r3, r1
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2264      	movs	r2, #100	; 0x64
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	1acb      	subs	r3, r1, r3
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002696:	4b36      	ldr	r3, [pc, #216]	; (8002770 <UART_SetConfig+0x2d4>)
 8002698:	fba3 2302 	umull	r2, r3, r3, r2
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026a4:	441c      	add	r4, r3
 80026a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026b8:	4642      	mov	r2, r8
 80026ba:	464b      	mov	r3, r9
 80026bc:	1891      	adds	r1, r2, r2
 80026be:	63b9      	str	r1, [r7, #56]	; 0x38
 80026c0:	415b      	adcs	r3, r3
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026c8:	4641      	mov	r1, r8
 80026ca:	1851      	adds	r1, r2, r1
 80026cc:	6339      	str	r1, [r7, #48]	; 0x30
 80026ce:	4649      	mov	r1, r9
 80026d0:	414b      	adcs	r3, r1
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026e0:	4659      	mov	r1, fp
 80026e2:	00cb      	lsls	r3, r1, #3
 80026e4:	4651      	mov	r1, sl
 80026e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ea:	4651      	mov	r1, sl
 80026ec:	00ca      	lsls	r2, r1, #3
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	4642      	mov	r2, r8
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026fc:	464b      	mov	r3, r9
 80026fe:	460a      	mov	r2, r1
 8002700:	eb42 0303 	adc.w	r3, r2, r3
 8002704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002714:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002718:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800271c:	460b      	mov	r3, r1
 800271e:	18db      	adds	r3, r3, r3
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
 8002722:	4613      	mov	r3, r2
 8002724:	eb42 0303 	adc.w	r3, r2, r3
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800272e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002732:	f7fd fda5 	bl	8000280 <__aeabi_uldivmod>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <UART_SetConfig+0x2d4>)
 800273c:	fba3 1302 	umull	r1, r3, r3, r2
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	2164      	movs	r1, #100	; 0x64
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	3332      	adds	r3, #50	; 0x32
 800274e:	4a08      	ldr	r2, [pc, #32]	; (8002770 <UART_SetConfig+0x2d4>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	f003 0207 	and.w	r2, r3, #7
 800275a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4422      	add	r2, r4
 8002762:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002764:	e105      	b.n	8002972 <UART_SetConfig+0x4d6>
 8002766:	bf00      	nop
 8002768:	40011000 	.word	0x40011000
 800276c:	40011400 	.word	0x40011400
 8002770:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002778:	2200      	movs	r2, #0
 800277a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800277e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002782:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002786:	4642      	mov	r2, r8
 8002788:	464b      	mov	r3, r9
 800278a:	1891      	adds	r1, r2, r2
 800278c:	6239      	str	r1, [r7, #32]
 800278e:	415b      	adcs	r3, r3
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002796:	4641      	mov	r1, r8
 8002798:	1854      	adds	r4, r2, r1
 800279a:	4649      	mov	r1, r9
 800279c:	eb43 0501 	adc.w	r5, r3, r1
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	00eb      	lsls	r3, r5, #3
 80027aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ae:	00e2      	lsls	r2, r4, #3
 80027b0:	4614      	mov	r4, r2
 80027b2:	461d      	mov	r5, r3
 80027b4:	4643      	mov	r3, r8
 80027b6:	18e3      	adds	r3, r4, r3
 80027b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027bc:	464b      	mov	r3, r9
 80027be:	eb45 0303 	adc.w	r3, r5, r3
 80027c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027e2:	4629      	mov	r1, r5
 80027e4:	008b      	lsls	r3, r1, #2
 80027e6:	4621      	mov	r1, r4
 80027e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ec:	4621      	mov	r1, r4
 80027ee:	008a      	lsls	r2, r1, #2
 80027f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80027f4:	f7fd fd44 	bl	8000280 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4b60      	ldr	r3, [pc, #384]	; (8002980 <UART_SetConfig+0x4e4>)
 80027fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	011c      	lsls	r4, r3, #4
 8002806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280a:	2200      	movs	r2, #0
 800280c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002810:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002814:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	1891      	adds	r1, r2, r2
 800281e:	61b9      	str	r1, [r7, #24]
 8002820:	415b      	adcs	r3, r3
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002828:	4641      	mov	r1, r8
 800282a:	1851      	adds	r1, r2, r1
 800282c:	6139      	str	r1, [r7, #16]
 800282e:	4649      	mov	r1, r9
 8002830:	414b      	adcs	r3, r1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002840:	4659      	mov	r1, fp
 8002842:	00cb      	lsls	r3, r1, #3
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284a:	4651      	mov	r1, sl
 800284c:	00ca      	lsls	r2, r1, #3
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	4603      	mov	r3, r0
 8002854:	4642      	mov	r2, r8
 8002856:	189b      	adds	r3, r3, r2
 8002858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800285c:	464b      	mov	r3, r9
 800285e:	460a      	mov	r2, r1
 8002860:	eb42 0303 	adc.w	r3, r2, r3
 8002864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	67bb      	str	r3, [r7, #120]	; 0x78
 8002872:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002880:	4649      	mov	r1, r9
 8002882:	008b      	lsls	r3, r1, #2
 8002884:	4641      	mov	r1, r8
 8002886:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800288a:	4641      	mov	r1, r8
 800288c:	008a      	lsls	r2, r1, #2
 800288e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002892:	f7fd fcf5 	bl	8000280 <__aeabi_uldivmod>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4b39      	ldr	r3, [pc, #228]	; (8002980 <UART_SetConfig+0x4e4>)
 800289c:	fba3 1302 	umull	r1, r3, r3, r2
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	2164      	movs	r1, #100	; 0x64
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	3332      	adds	r3, #50	; 0x32
 80028ae:	4a34      	ldr	r2, [pc, #208]	; (8002980 <UART_SetConfig+0x4e4>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ba:	441c      	add	r4, r3
 80028bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028c0:	2200      	movs	r2, #0
 80028c2:	673b      	str	r3, [r7, #112]	; 0x70
 80028c4:	677a      	str	r2, [r7, #116]	; 0x74
 80028c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028ca:	4642      	mov	r2, r8
 80028cc:	464b      	mov	r3, r9
 80028ce:	1891      	adds	r1, r2, r2
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	415b      	adcs	r3, r3
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028da:	4641      	mov	r1, r8
 80028dc:	1851      	adds	r1, r2, r1
 80028de:	6039      	str	r1, [r7, #0]
 80028e0:	4649      	mov	r1, r9
 80028e2:	414b      	adcs	r3, r1
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028f2:	4659      	mov	r1, fp
 80028f4:	00cb      	lsls	r3, r1, #3
 80028f6:	4651      	mov	r1, sl
 80028f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fc:	4651      	mov	r1, sl
 80028fe:	00ca      	lsls	r2, r1, #3
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	4603      	mov	r3, r0
 8002906:	4642      	mov	r2, r8
 8002908:	189b      	adds	r3, r3, r2
 800290a:	66bb      	str	r3, [r7, #104]	; 0x68
 800290c:	464b      	mov	r3, r9
 800290e:	460a      	mov	r2, r1
 8002910:	eb42 0303 	adc.w	r3, r2, r3
 8002914:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	663b      	str	r3, [r7, #96]	; 0x60
 8002920:	667a      	str	r2, [r7, #100]	; 0x64
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800292e:	4649      	mov	r1, r9
 8002930:	008b      	lsls	r3, r1, #2
 8002932:	4641      	mov	r1, r8
 8002934:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002938:	4641      	mov	r1, r8
 800293a:	008a      	lsls	r2, r1, #2
 800293c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002940:	f7fd fc9e 	bl	8000280 <__aeabi_uldivmod>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <UART_SetConfig+0x4e4>)
 800294a:	fba3 1302 	umull	r1, r3, r3, r2
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2164      	movs	r1, #100	; 0x64
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	3332      	adds	r3, #50	; 0x32
 800295c:	4a08      	ldr	r2, [pc, #32]	; (8002980 <UART_SetConfig+0x4e4>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	f003 020f 	and.w	r2, r3, #15
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4422      	add	r2, r4
 8002970:	609a      	str	r2, [r3, #8]
}
 8002972:	bf00      	nop
 8002974:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002978:	46bd      	mov	sp, r7
 800297a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800297e:	bf00      	nop
 8002980:	51eb851f 	.word	0x51eb851f

08002984 <__errno>:
 8002984:	4b01      	ldr	r3, [pc, #4]	; (800298c <__errno+0x8>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	2000000c 	.word	0x2000000c

08002990 <__libc_init_array>:
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	4d0d      	ldr	r5, [pc, #52]	; (80029c8 <__libc_init_array+0x38>)
 8002994:	4c0d      	ldr	r4, [pc, #52]	; (80029cc <__libc_init_array+0x3c>)
 8002996:	1b64      	subs	r4, r4, r5
 8002998:	10a4      	asrs	r4, r4, #2
 800299a:	2600      	movs	r6, #0
 800299c:	42a6      	cmp	r6, r4
 800299e:	d109      	bne.n	80029b4 <__libc_init_array+0x24>
 80029a0:	4d0b      	ldr	r5, [pc, #44]	; (80029d0 <__libc_init_array+0x40>)
 80029a2:	4c0c      	ldr	r4, [pc, #48]	; (80029d4 <__libc_init_array+0x44>)
 80029a4:	f000 ffae 	bl	8003904 <_init>
 80029a8:	1b64      	subs	r4, r4, r5
 80029aa:	10a4      	asrs	r4, r4, #2
 80029ac:	2600      	movs	r6, #0
 80029ae:	42a6      	cmp	r6, r4
 80029b0:	d105      	bne.n	80029be <__libc_init_array+0x2e>
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
 80029b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b8:	4798      	blx	r3
 80029ba:	3601      	adds	r6, #1
 80029bc:	e7ee      	b.n	800299c <__libc_init_array+0xc>
 80029be:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c2:	4798      	blx	r3
 80029c4:	3601      	adds	r6, #1
 80029c6:	e7f2      	b.n	80029ae <__libc_init_array+0x1e>
 80029c8:	080039e4 	.word	0x080039e4
 80029cc:	080039e4 	.word	0x080039e4
 80029d0:	080039e4 	.word	0x080039e4
 80029d4:	080039e8 	.word	0x080039e8

080029d8 <memset>:
 80029d8:	4402      	add	r2, r0
 80029da:	4603      	mov	r3, r0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d100      	bne.n	80029e2 <memset+0xa>
 80029e0:	4770      	bx	lr
 80029e2:	f803 1b01 	strb.w	r1, [r3], #1
 80029e6:	e7f9      	b.n	80029dc <memset+0x4>

080029e8 <iprintf>:
 80029e8:	b40f      	push	{r0, r1, r2, r3}
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <iprintf+0x2c>)
 80029ec:	b513      	push	{r0, r1, r4, lr}
 80029ee:	681c      	ldr	r4, [r3, #0]
 80029f0:	b124      	cbz	r4, 80029fc <iprintf+0x14>
 80029f2:	69a3      	ldr	r3, [r4, #24]
 80029f4:	b913      	cbnz	r3, 80029fc <iprintf+0x14>
 80029f6:	4620      	mov	r0, r4
 80029f8:	f000 f866 	bl	8002ac8 <__sinit>
 80029fc:	ab05      	add	r3, sp, #20
 80029fe:	9a04      	ldr	r2, [sp, #16]
 8002a00:	68a1      	ldr	r1, [r4, #8]
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	4620      	mov	r0, r4
 8002a06:	f000 f9bd 	bl	8002d84 <_vfiprintf_r>
 8002a0a:	b002      	add	sp, #8
 8002a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a10:	b004      	add	sp, #16
 8002a12:	4770      	bx	lr
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <std>:
 8002a18:	2300      	movs	r3, #0
 8002a1a:	b510      	push	{r4, lr}
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8002a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a26:	6083      	str	r3, [r0, #8]
 8002a28:	8181      	strh	r1, [r0, #12]
 8002a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8002a2c:	81c2      	strh	r2, [r0, #14]
 8002a2e:	6183      	str	r3, [r0, #24]
 8002a30:	4619      	mov	r1, r3
 8002a32:	2208      	movs	r2, #8
 8002a34:	305c      	adds	r0, #92	; 0x5c
 8002a36:	f7ff ffcf 	bl	80029d8 <memset>
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <std+0x38>)
 8002a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <std+0x3c>)
 8002a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <std+0x40>)
 8002a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <std+0x44>)
 8002a48:	6224      	str	r4, [r4, #32]
 8002a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	bf00      	nop
 8002a50:	0800332d 	.word	0x0800332d
 8002a54:	0800334f 	.word	0x0800334f
 8002a58:	08003387 	.word	0x08003387
 8002a5c:	080033ab 	.word	0x080033ab

08002a60 <_cleanup_r>:
 8002a60:	4901      	ldr	r1, [pc, #4]	; (8002a68 <_cleanup_r+0x8>)
 8002a62:	f000 b8af 	b.w	8002bc4 <_fwalk_reent>
 8002a66:	bf00      	nop
 8002a68:	08003685 	.word	0x08003685

08002a6c <__sfmoreglue>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	2268      	movs	r2, #104	; 0x68
 8002a70:	1e4d      	subs	r5, r1, #1
 8002a72:	4355      	muls	r5, r2
 8002a74:	460e      	mov	r6, r1
 8002a76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a7a:	f000 f8e5 	bl	8002c48 <_malloc_r>
 8002a7e:	4604      	mov	r4, r0
 8002a80:	b140      	cbz	r0, 8002a94 <__sfmoreglue+0x28>
 8002a82:	2100      	movs	r1, #0
 8002a84:	e9c0 1600 	strd	r1, r6, [r0]
 8002a88:	300c      	adds	r0, #12
 8002a8a:	60a0      	str	r0, [r4, #8]
 8002a8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a90:	f7ff ffa2 	bl	80029d8 <memset>
 8002a94:	4620      	mov	r0, r4
 8002a96:	bd70      	pop	{r4, r5, r6, pc}

08002a98 <__sfp_lock_acquire>:
 8002a98:	4801      	ldr	r0, [pc, #4]	; (8002aa0 <__sfp_lock_acquire+0x8>)
 8002a9a:	f000 b8b3 	b.w	8002c04 <__retarget_lock_acquire_recursive>
 8002a9e:	bf00      	nop
 8002aa0:	20000121 	.word	0x20000121

08002aa4 <__sfp_lock_release>:
 8002aa4:	4801      	ldr	r0, [pc, #4]	; (8002aac <__sfp_lock_release+0x8>)
 8002aa6:	f000 b8ae 	b.w	8002c06 <__retarget_lock_release_recursive>
 8002aaa:	bf00      	nop
 8002aac:	20000121 	.word	0x20000121

08002ab0 <__sinit_lock_acquire>:
 8002ab0:	4801      	ldr	r0, [pc, #4]	; (8002ab8 <__sinit_lock_acquire+0x8>)
 8002ab2:	f000 b8a7 	b.w	8002c04 <__retarget_lock_acquire_recursive>
 8002ab6:	bf00      	nop
 8002ab8:	20000122 	.word	0x20000122

08002abc <__sinit_lock_release>:
 8002abc:	4801      	ldr	r0, [pc, #4]	; (8002ac4 <__sinit_lock_release+0x8>)
 8002abe:	f000 b8a2 	b.w	8002c06 <__retarget_lock_release_recursive>
 8002ac2:	bf00      	nop
 8002ac4:	20000122 	.word	0x20000122

08002ac8 <__sinit>:
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	4604      	mov	r4, r0
 8002acc:	f7ff fff0 	bl	8002ab0 <__sinit_lock_acquire>
 8002ad0:	69a3      	ldr	r3, [r4, #24]
 8002ad2:	b11b      	cbz	r3, 8002adc <__sinit+0x14>
 8002ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ad8:	f7ff bff0 	b.w	8002abc <__sinit_lock_release>
 8002adc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <__sinit+0x68>)
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <__sinit+0x6c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002aea:	42a3      	cmp	r3, r4
 8002aec:	bf04      	itt	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	61a3      	streq	r3, [r4, #24]
 8002af2:	4620      	mov	r0, r4
 8002af4:	f000 f820 	bl	8002b38 <__sfp>
 8002af8:	6060      	str	r0, [r4, #4]
 8002afa:	4620      	mov	r0, r4
 8002afc:	f000 f81c 	bl	8002b38 <__sfp>
 8002b00:	60a0      	str	r0, [r4, #8]
 8002b02:	4620      	mov	r0, r4
 8002b04:	f000 f818 	bl	8002b38 <__sfp>
 8002b08:	2200      	movs	r2, #0
 8002b0a:	60e0      	str	r0, [r4, #12]
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	6860      	ldr	r0, [r4, #4]
 8002b10:	f7ff ff82 	bl	8002a18 <std>
 8002b14:	68a0      	ldr	r0, [r4, #8]
 8002b16:	2201      	movs	r2, #1
 8002b18:	2109      	movs	r1, #9
 8002b1a:	f7ff ff7d 	bl	8002a18 <std>
 8002b1e:	68e0      	ldr	r0, [r4, #12]
 8002b20:	2202      	movs	r2, #2
 8002b22:	2112      	movs	r1, #18
 8002b24:	f7ff ff78 	bl	8002a18 <std>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	61a3      	str	r3, [r4, #24]
 8002b2c:	e7d2      	b.n	8002ad4 <__sinit+0xc>
 8002b2e:	bf00      	nop
 8002b30:	08003944 	.word	0x08003944
 8002b34:	08002a61 	.word	0x08002a61

08002b38 <__sfp>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	4607      	mov	r7, r0
 8002b3c:	f7ff ffac 	bl	8002a98 <__sfp_lock_acquire>
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <__sfp+0x84>)
 8002b42:	681e      	ldr	r6, [r3, #0]
 8002b44:	69b3      	ldr	r3, [r6, #24]
 8002b46:	b913      	cbnz	r3, 8002b4e <__sfp+0x16>
 8002b48:	4630      	mov	r0, r6
 8002b4a:	f7ff ffbd 	bl	8002ac8 <__sinit>
 8002b4e:	3648      	adds	r6, #72	; 0x48
 8002b50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	d503      	bpl.n	8002b60 <__sfp+0x28>
 8002b58:	6833      	ldr	r3, [r6, #0]
 8002b5a:	b30b      	cbz	r3, 8002ba0 <__sfp+0x68>
 8002b5c:	6836      	ldr	r6, [r6, #0]
 8002b5e:	e7f7      	b.n	8002b50 <__sfp+0x18>
 8002b60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b64:	b9d5      	cbnz	r5, 8002b9c <__sfp+0x64>
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <__sfp+0x88>)
 8002b68:	60e3      	str	r3, [r4, #12]
 8002b6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b6e:	6665      	str	r5, [r4, #100]	; 0x64
 8002b70:	f000 f847 	bl	8002c02 <__retarget_lock_init_recursive>
 8002b74:	f7ff ff96 	bl	8002aa4 <__sfp_lock_release>
 8002b78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b80:	6025      	str	r5, [r4, #0]
 8002b82:	61a5      	str	r5, [r4, #24]
 8002b84:	2208      	movs	r2, #8
 8002b86:	4629      	mov	r1, r5
 8002b88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b8c:	f7ff ff24 	bl	80029d8 <memset>
 8002b90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b98:	4620      	mov	r0, r4
 8002b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b9c:	3468      	adds	r4, #104	; 0x68
 8002b9e:	e7d9      	b.n	8002b54 <__sfp+0x1c>
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	4638      	mov	r0, r7
 8002ba4:	f7ff ff62 	bl	8002a6c <__sfmoreglue>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	6030      	str	r0, [r6, #0]
 8002bac:	2800      	cmp	r0, #0
 8002bae:	d1d5      	bne.n	8002b5c <__sfp+0x24>
 8002bb0:	f7ff ff78 	bl	8002aa4 <__sfp_lock_release>
 8002bb4:	230c      	movs	r3, #12
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	e7ee      	b.n	8002b98 <__sfp+0x60>
 8002bba:	bf00      	nop
 8002bbc:	08003944 	.word	0x08003944
 8002bc0:	ffff0001 	.word	0xffff0001

08002bc4 <_fwalk_reent>:
 8002bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bc8:	4606      	mov	r6, r0
 8002bca:	4688      	mov	r8, r1
 8002bcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002bd0:	2700      	movs	r7, #0
 8002bd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bd6:	f1b9 0901 	subs.w	r9, r9, #1
 8002bda:	d505      	bpl.n	8002be8 <_fwalk_reent+0x24>
 8002bdc:	6824      	ldr	r4, [r4, #0]
 8002bde:	2c00      	cmp	r4, #0
 8002be0:	d1f7      	bne.n	8002bd2 <_fwalk_reent+0xe>
 8002be2:	4638      	mov	r0, r7
 8002be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002be8:	89ab      	ldrh	r3, [r5, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d907      	bls.n	8002bfe <_fwalk_reent+0x3a>
 8002bee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	d003      	beq.n	8002bfe <_fwalk_reent+0x3a>
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	47c0      	blx	r8
 8002bfc:	4307      	orrs	r7, r0
 8002bfe:	3568      	adds	r5, #104	; 0x68
 8002c00:	e7e9      	b.n	8002bd6 <_fwalk_reent+0x12>

08002c02 <__retarget_lock_init_recursive>:
 8002c02:	4770      	bx	lr

08002c04 <__retarget_lock_acquire_recursive>:
 8002c04:	4770      	bx	lr

08002c06 <__retarget_lock_release_recursive>:
 8002c06:	4770      	bx	lr

08002c08 <sbrk_aligned>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	4e0e      	ldr	r6, [pc, #56]	; (8002c44 <sbrk_aligned+0x3c>)
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	6831      	ldr	r1, [r6, #0]
 8002c10:	4605      	mov	r5, r0
 8002c12:	b911      	cbnz	r1, 8002c1a <sbrk_aligned+0x12>
 8002c14:	f000 fb7a 	bl	800330c <_sbrk_r>
 8002c18:	6030      	str	r0, [r6, #0]
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f000 fb75 	bl	800330c <_sbrk_r>
 8002c22:	1c43      	adds	r3, r0, #1
 8002c24:	d00a      	beq.n	8002c3c <sbrk_aligned+0x34>
 8002c26:	1cc4      	adds	r4, r0, #3
 8002c28:	f024 0403 	bic.w	r4, r4, #3
 8002c2c:	42a0      	cmp	r0, r4
 8002c2e:	d007      	beq.n	8002c40 <sbrk_aligned+0x38>
 8002c30:	1a21      	subs	r1, r4, r0
 8002c32:	4628      	mov	r0, r5
 8002c34:	f000 fb6a 	bl	800330c <_sbrk_r>
 8002c38:	3001      	adds	r0, #1
 8002c3a:	d101      	bne.n	8002c40 <sbrk_aligned+0x38>
 8002c3c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c40:	4620      	mov	r0, r4
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	20000128 	.word	0x20000128

08002c48 <_malloc_r>:
 8002c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c4c:	1ccd      	adds	r5, r1, #3
 8002c4e:	f025 0503 	bic.w	r5, r5, #3
 8002c52:	3508      	adds	r5, #8
 8002c54:	2d0c      	cmp	r5, #12
 8002c56:	bf38      	it	cc
 8002c58:	250c      	movcc	r5, #12
 8002c5a:	2d00      	cmp	r5, #0
 8002c5c:	4607      	mov	r7, r0
 8002c5e:	db01      	blt.n	8002c64 <_malloc_r+0x1c>
 8002c60:	42a9      	cmp	r1, r5
 8002c62:	d905      	bls.n	8002c70 <_malloc_r+0x28>
 8002c64:	230c      	movs	r3, #12
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	2600      	movs	r6, #0
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c70:	4e2e      	ldr	r6, [pc, #184]	; (8002d2c <_malloc_r+0xe4>)
 8002c72:	f000 fdbb 	bl	80037ec <__malloc_lock>
 8002c76:	6833      	ldr	r3, [r6, #0]
 8002c78:	461c      	mov	r4, r3
 8002c7a:	bb34      	cbnz	r4, 8002cca <_malloc_r+0x82>
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	4638      	mov	r0, r7
 8002c80:	f7ff ffc2 	bl	8002c08 <sbrk_aligned>
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	4604      	mov	r4, r0
 8002c88:	d14d      	bne.n	8002d26 <_malloc_r+0xde>
 8002c8a:	6834      	ldr	r4, [r6, #0]
 8002c8c:	4626      	mov	r6, r4
 8002c8e:	2e00      	cmp	r6, #0
 8002c90:	d140      	bne.n	8002d14 <_malloc_r+0xcc>
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	4631      	mov	r1, r6
 8002c96:	4638      	mov	r0, r7
 8002c98:	eb04 0803 	add.w	r8, r4, r3
 8002c9c:	f000 fb36 	bl	800330c <_sbrk_r>
 8002ca0:	4580      	cmp	r8, r0
 8002ca2:	d13a      	bne.n	8002d1a <_malloc_r+0xd2>
 8002ca4:	6821      	ldr	r1, [r4, #0]
 8002ca6:	3503      	adds	r5, #3
 8002ca8:	1a6d      	subs	r5, r5, r1
 8002caa:	f025 0503 	bic.w	r5, r5, #3
 8002cae:	3508      	adds	r5, #8
 8002cb0:	2d0c      	cmp	r5, #12
 8002cb2:	bf38      	it	cc
 8002cb4:	250c      	movcc	r5, #12
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	4638      	mov	r0, r7
 8002cba:	f7ff ffa5 	bl	8002c08 <sbrk_aligned>
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	d02b      	beq.n	8002d1a <_malloc_r+0xd2>
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	442b      	add	r3, r5
 8002cc6:	6023      	str	r3, [r4, #0]
 8002cc8:	e00e      	b.n	8002ce8 <_malloc_r+0xa0>
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	1b52      	subs	r2, r2, r5
 8002cce:	d41e      	bmi.n	8002d0e <_malloc_r+0xc6>
 8002cd0:	2a0b      	cmp	r2, #11
 8002cd2:	d916      	bls.n	8002d02 <_malloc_r+0xba>
 8002cd4:	1961      	adds	r1, r4, r5
 8002cd6:	42a3      	cmp	r3, r4
 8002cd8:	6025      	str	r5, [r4, #0]
 8002cda:	bf18      	it	ne
 8002cdc:	6059      	strne	r1, [r3, #4]
 8002cde:	6863      	ldr	r3, [r4, #4]
 8002ce0:	bf08      	it	eq
 8002ce2:	6031      	streq	r1, [r6, #0]
 8002ce4:	5162      	str	r2, [r4, r5]
 8002ce6:	604b      	str	r3, [r1, #4]
 8002ce8:	4638      	mov	r0, r7
 8002cea:	f104 060b 	add.w	r6, r4, #11
 8002cee:	f000 fd83 	bl	80037f8 <__malloc_unlock>
 8002cf2:	f026 0607 	bic.w	r6, r6, #7
 8002cf6:	1d23      	adds	r3, r4, #4
 8002cf8:	1af2      	subs	r2, r6, r3
 8002cfa:	d0b6      	beq.n	8002c6a <_malloc_r+0x22>
 8002cfc:	1b9b      	subs	r3, r3, r6
 8002cfe:	50a3      	str	r3, [r4, r2]
 8002d00:	e7b3      	b.n	8002c6a <_malloc_r+0x22>
 8002d02:	6862      	ldr	r2, [r4, #4]
 8002d04:	42a3      	cmp	r3, r4
 8002d06:	bf0c      	ite	eq
 8002d08:	6032      	streq	r2, [r6, #0]
 8002d0a:	605a      	strne	r2, [r3, #4]
 8002d0c:	e7ec      	b.n	8002ce8 <_malloc_r+0xa0>
 8002d0e:	4623      	mov	r3, r4
 8002d10:	6864      	ldr	r4, [r4, #4]
 8002d12:	e7b2      	b.n	8002c7a <_malloc_r+0x32>
 8002d14:	4634      	mov	r4, r6
 8002d16:	6876      	ldr	r6, [r6, #4]
 8002d18:	e7b9      	b.n	8002c8e <_malloc_r+0x46>
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4638      	mov	r0, r7
 8002d20:	f000 fd6a 	bl	80037f8 <__malloc_unlock>
 8002d24:	e7a1      	b.n	8002c6a <_malloc_r+0x22>
 8002d26:	6025      	str	r5, [r4, #0]
 8002d28:	e7de      	b.n	8002ce8 <_malloc_r+0xa0>
 8002d2a:	bf00      	nop
 8002d2c:	20000124 	.word	0x20000124

08002d30 <__sfputc_r>:
 8002d30:	6893      	ldr	r3, [r2, #8]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	b410      	push	{r4}
 8002d38:	6093      	str	r3, [r2, #8]
 8002d3a:	da08      	bge.n	8002d4e <__sfputc_r+0x1e>
 8002d3c:	6994      	ldr	r4, [r2, #24]
 8002d3e:	42a3      	cmp	r3, r4
 8002d40:	db01      	blt.n	8002d46 <__sfputc_r+0x16>
 8002d42:	290a      	cmp	r1, #10
 8002d44:	d103      	bne.n	8002d4e <__sfputc_r+0x1e>
 8002d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d4a:	f000 bb33 	b.w	80033b4 <__swbuf_r>
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	1c58      	adds	r0, r3, #1
 8002d52:	6010      	str	r0, [r2, #0]
 8002d54:	7019      	strb	r1, [r3, #0]
 8002d56:	4608      	mov	r0, r1
 8002d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <__sfputs_r>:
 8002d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d60:	4606      	mov	r6, r0
 8002d62:	460f      	mov	r7, r1
 8002d64:	4614      	mov	r4, r2
 8002d66:	18d5      	adds	r5, r2, r3
 8002d68:	42ac      	cmp	r4, r5
 8002d6a:	d101      	bne.n	8002d70 <__sfputs_r+0x12>
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	e007      	b.n	8002d80 <__sfputs_r+0x22>
 8002d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d74:	463a      	mov	r2, r7
 8002d76:	4630      	mov	r0, r6
 8002d78:	f7ff ffda 	bl	8002d30 <__sfputc_r>
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d1f3      	bne.n	8002d68 <__sfputs_r+0xa>
 8002d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d84 <_vfiprintf_r>:
 8002d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d88:	460d      	mov	r5, r1
 8002d8a:	b09d      	sub	sp, #116	; 0x74
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	4698      	mov	r8, r3
 8002d90:	4606      	mov	r6, r0
 8002d92:	b118      	cbz	r0, 8002d9c <_vfiprintf_r+0x18>
 8002d94:	6983      	ldr	r3, [r0, #24]
 8002d96:	b90b      	cbnz	r3, 8002d9c <_vfiprintf_r+0x18>
 8002d98:	f7ff fe96 	bl	8002ac8 <__sinit>
 8002d9c:	4b89      	ldr	r3, [pc, #548]	; (8002fc4 <_vfiprintf_r+0x240>)
 8002d9e:	429d      	cmp	r5, r3
 8002da0:	d11b      	bne.n	8002dda <_vfiprintf_r+0x56>
 8002da2:	6875      	ldr	r5, [r6, #4]
 8002da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002da6:	07d9      	lsls	r1, r3, #31
 8002da8:	d405      	bmi.n	8002db6 <_vfiprintf_r+0x32>
 8002daa:	89ab      	ldrh	r3, [r5, #12]
 8002dac:	059a      	lsls	r2, r3, #22
 8002dae:	d402      	bmi.n	8002db6 <_vfiprintf_r+0x32>
 8002db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002db2:	f7ff ff27 	bl	8002c04 <__retarget_lock_acquire_recursive>
 8002db6:	89ab      	ldrh	r3, [r5, #12]
 8002db8:	071b      	lsls	r3, r3, #28
 8002dba:	d501      	bpl.n	8002dc0 <_vfiprintf_r+0x3c>
 8002dbc:	692b      	ldr	r3, [r5, #16]
 8002dbe:	b9eb      	cbnz	r3, 8002dfc <_vfiprintf_r+0x78>
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f000 fb5a 	bl	800347c <__swsetup_r>
 8002dc8:	b1c0      	cbz	r0, 8002dfc <_vfiprintf_r+0x78>
 8002dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dcc:	07dc      	lsls	r4, r3, #31
 8002dce:	d50e      	bpl.n	8002dee <_vfiprintf_r+0x6a>
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	b01d      	add	sp, #116	; 0x74
 8002dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dda:	4b7b      	ldr	r3, [pc, #492]	; (8002fc8 <_vfiprintf_r+0x244>)
 8002ddc:	429d      	cmp	r5, r3
 8002dde:	d101      	bne.n	8002de4 <_vfiprintf_r+0x60>
 8002de0:	68b5      	ldr	r5, [r6, #8]
 8002de2:	e7df      	b.n	8002da4 <_vfiprintf_r+0x20>
 8002de4:	4b79      	ldr	r3, [pc, #484]	; (8002fcc <_vfiprintf_r+0x248>)
 8002de6:	429d      	cmp	r5, r3
 8002de8:	bf08      	it	eq
 8002dea:	68f5      	ldreq	r5, [r6, #12]
 8002dec:	e7da      	b.n	8002da4 <_vfiprintf_r+0x20>
 8002dee:	89ab      	ldrh	r3, [r5, #12]
 8002df0:	0598      	lsls	r0, r3, #22
 8002df2:	d4ed      	bmi.n	8002dd0 <_vfiprintf_r+0x4c>
 8002df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002df6:	f7ff ff06 	bl	8002c06 <__retarget_lock_release_recursive>
 8002dfa:	e7e9      	b.n	8002dd0 <_vfiprintf_r+0x4c>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8002e00:	2320      	movs	r3, #32
 8002e02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e0a:	2330      	movs	r3, #48	; 0x30
 8002e0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002fd0 <_vfiprintf_r+0x24c>
 8002e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e14:	f04f 0901 	mov.w	r9, #1
 8002e18:	4623      	mov	r3, r4
 8002e1a:	469a      	mov	sl, r3
 8002e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e20:	b10a      	cbz	r2, 8002e26 <_vfiprintf_r+0xa2>
 8002e22:	2a25      	cmp	r2, #37	; 0x25
 8002e24:	d1f9      	bne.n	8002e1a <_vfiprintf_r+0x96>
 8002e26:	ebba 0b04 	subs.w	fp, sl, r4
 8002e2a:	d00b      	beq.n	8002e44 <_vfiprintf_r+0xc0>
 8002e2c:	465b      	mov	r3, fp
 8002e2e:	4622      	mov	r2, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	4630      	mov	r0, r6
 8002e34:	f7ff ff93 	bl	8002d5e <__sfputs_r>
 8002e38:	3001      	adds	r0, #1
 8002e3a:	f000 80aa 	beq.w	8002f92 <_vfiprintf_r+0x20e>
 8002e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e40:	445a      	add	r2, fp
 8002e42:	9209      	str	r2, [sp, #36]	; 0x24
 8002e44:	f89a 3000 	ldrb.w	r3, [sl]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a2 	beq.w	8002f92 <_vfiprintf_r+0x20e>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e58:	f10a 0a01 	add.w	sl, sl, #1
 8002e5c:	9304      	str	r3, [sp, #16]
 8002e5e:	9307      	str	r3, [sp, #28]
 8002e60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e64:	931a      	str	r3, [sp, #104]	; 0x68
 8002e66:	4654      	mov	r4, sl
 8002e68:	2205      	movs	r2, #5
 8002e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e6e:	4858      	ldr	r0, [pc, #352]	; (8002fd0 <_vfiprintf_r+0x24c>)
 8002e70:	f7fd f9b6 	bl	80001e0 <memchr>
 8002e74:	9a04      	ldr	r2, [sp, #16]
 8002e76:	b9d8      	cbnz	r0, 8002eb0 <_vfiprintf_r+0x12c>
 8002e78:	06d1      	lsls	r1, r2, #27
 8002e7a:	bf44      	itt	mi
 8002e7c:	2320      	movmi	r3, #32
 8002e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e82:	0713      	lsls	r3, r2, #28
 8002e84:	bf44      	itt	mi
 8002e86:	232b      	movmi	r3, #43	; 0x2b
 8002e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002e90:	2b2a      	cmp	r3, #42	; 0x2a
 8002e92:	d015      	beq.n	8002ec0 <_vfiprintf_r+0x13c>
 8002e94:	9a07      	ldr	r2, [sp, #28]
 8002e96:	4654      	mov	r4, sl
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f04f 0c0a 	mov.w	ip, #10
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ea4:	3b30      	subs	r3, #48	; 0x30
 8002ea6:	2b09      	cmp	r3, #9
 8002ea8:	d94e      	bls.n	8002f48 <_vfiprintf_r+0x1c4>
 8002eaa:	b1b0      	cbz	r0, 8002eda <_vfiprintf_r+0x156>
 8002eac:	9207      	str	r2, [sp, #28]
 8002eae:	e014      	b.n	8002eda <_vfiprintf_r+0x156>
 8002eb0:	eba0 0308 	sub.w	r3, r0, r8
 8002eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	9304      	str	r3, [sp, #16]
 8002ebc:	46a2      	mov	sl, r4
 8002ebe:	e7d2      	b.n	8002e66 <_vfiprintf_r+0xe2>
 8002ec0:	9b03      	ldr	r3, [sp, #12]
 8002ec2:	1d19      	adds	r1, r3, #4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	9103      	str	r1, [sp, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bfbb      	ittet	lt
 8002ecc:	425b      	neglt	r3, r3
 8002ece:	f042 0202 	orrlt.w	r2, r2, #2
 8002ed2:	9307      	strge	r3, [sp, #28]
 8002ed4:	9307      	strlt	r3, [sp, #28]
 8002ed6:	bfb8      	it	lt
 8002ed8:	9204      	strlt	r2, [sp, #16]
 8002eda:	7823      	ldrb	r3, [r4, #0]
 8002edc:	2b2e      	cmp	r3, #46	; 0x2e
 8002ede:	d10c      	bne.n	8002efa <_vfiprintf_r+0x176>
 8002ee0:	7863      	ldrb	r3, [r4, #1]
 8002ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee4:	d135      	bne.n	8002f52 <_vfiprintf_r+0x1ce>
 8002ee6:	9b03      	ldr	r3, [sp, #12]
 8002ee8:	1d1a      	adds	r2, r3, #4
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	9203      	str	r2, [sp, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bfb8      	it	lt
 8002ef2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ef6:	3402      	adds	r4, #2
 8002ef8:	9305      	str	r3, [sp, #20]
 8002efa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002fe0 <_vfiprintf_r+0x25c>
 8002efe:	7821      	ldrb	r1, [r4, #0]
 8002f00:	2203      	movs	r2, #3
 8002f02:	4650      	mov	r0, sl
 8002f04:	f7fd f96c 	bl	80001e0 <memchr>
 8002f08:	b140      	cbz	r0, 8002f1c <_vfiprintf_r+0x198>
 8002f0a:	2340      	movs	r3, #64	; 0x40
 8002f0c:	eba0 000a 	sub.w	r0, r0, sl
 8002f10:	fa03 f000 	lsl.w	r0, r3, r0
 8002f14:	9b04      	ldr	r3, [sp, #16]
 8002f16:	4303      	orrs	r3, r0
 8002f18:	3401      	adds	r4, #1
 8002f1a:	9304      	str	r3, [sp, #16]
 8002f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f20:	482c      	ldr	r0, [pc, #176]	; (8002fd4 <_vfiprintf_r+0x250>)
 8002f22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f26:	2206      	movs	r2, #6
 8002f28:	f7fd f95a 	bl	80001e0 <memchr>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d03f      	beq.n	8002fb0 <_vfiprintf_r+0x22c>
 8002f30:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <_vfiprintf_r+0x254>)
 8002f32:	bb1b      	cbnz	r3, 8002f7c <_vfiprintf_r+0x1f8>
 8002f34:	9b03      	ldr	r3, [sp, #12]
 8002f36:	3307      	adds	r3, #7
 8002f38:	f023 0307 	bic.w	r3, r3, #7
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	9303      	str	r3, [sp, #12]
 8002f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f42:	443b      	add	r3, r7
 8002f44:	9309      	str	r3, [sp, #36]	; 0x24
 8002f46:	e767      	b.n	8002e18 <_vfiprintf_r+0x94>
 8002f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f4c:	460c      	mov	r4, r1
 8002f4e:	2001      	movs	r0, #1
 8002f50:	e7a5      	b.n	8002e9e <_vfiprintf_r+0x11a>
 8002f52:	2300      	movs	r3, #0
 8002f54:	3401      	adds	r4, #1
 8002f56:	9305      	str	r3, [sp, #20]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f04f 0c0a 	mov.w	ip, #10
 8002f5e:	4620      	mov	r0, r4
 8002f60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f64:	3a30      	subs	r2, #48	; 0x30
 8002f66:	2a09      	cmp	r2, #9
 8002f68:	d903      	bls.n	8002f72 <_vfiprintf_r+0x1ee>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0c5      	beq.n	8002efa <_vfiprintf_r+0x176>
 8002f6e:	9105      	str	r1, [sp, #20]
 8002f70:	e7c3      	b.n	8002efa <_vfiprintf_r+0x176>
 8002f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f76:	4604      	mov	r4, r0
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e7f0      	b.n	8002f5e <_vfiprintf_r+0x1da>
 8002f7c:	ab03      	add	r3, sp, #12
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	462a      	mov	r2, r5
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <_vfiprintf_r+0x258>)
 8002f84:	a904      	add	r1, sp, #16
 8002f86:	4630      	mov	r0, r6
 8002f88:	f3af 8000 	nop.w
 8002f8c:	4607      	mov	r7, r0
 8002f8e:	1c78      	adds	r0, r7, #1
 8002f90:	d1d6      	bne.n	8002f40 <_vfiprintf_r+0x1bc>
 8002f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f94:	07d9      	lsls	r1, r3, #31
 8002f96:	d405      	bmi.n	8002fa4 <_vfiprintf_r+0x220>
 8002f98:	89ab      	ldrh	r3, [r5, #12]
 8002f9a:	059a      	lsls	r2, r3, #22
 8002f9c:	d402      	bmi.n	8002fa4 <_vfiprintf_r+0x220>
 8002f9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fa0:	f7ff fe31 	bl	8002c06 <__retarget_lock_release_recursive>
 8002fa4:	89ab      	ldrh	r3, [r5, #12]
 8002fa6:	065b      	lsls	r3, r3, #25
 8002fa8:	f53f af12 	bmi.w	8002dd0 <_vfiprintf_r+0x4c>
 8002fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fae:	e711      	b.n	8002dd4 <_vfiprintf_r+0x50>
 8002fb0:	ab03      	add	r3, sp, #12
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	462a      	mov	r2, r5
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <_vfiprintf_r+0x258>)
 8002fb8:	a904      	add	r1, sp, #16
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f000 f880 	bl	80030c0 <_printf_i>
 8002fc0:	e7e4      	b.n	8002f8c <_vfiprintf_r+0x208>
 8002fc2:	bf00      	nop
 8002fc4:	08003968 	.word	0x08003968
 8002fc8:	08003988 	.word	0x08003988
 8002fcc:	08003948 	.word	0x08003948
 8002fd0:	080039a8 	.word	0x080039a8
 8002fd4:	080039b2 	.word	0x080039b2
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	08002d5f 	.word	0x08002d5f
 8002fe0:	080039ae 	.word	0x080039ae

08002fe4 <_printf_common>:
 8002fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe8:	4616      	mov	r6, r2
 8002fea:	4699      	mov	r9, r3
 8002fec:	688a      	ldr	r2, [r1, #8]
 8002fee:	690b      	ldr	r3, [r1, #16]
 8002ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	bfb8      	it	lt
 8002ff8:	4613      	movlt	r3, r2
 8002ffa:	6033      	str	r3, [r6, #0]
 8002ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003000:	4607      	mov	r7, r0
 8003002:	460c      	mov	r4, r1
 8003004:	b10a      	cbz	r2, 800300a <_printf_common+0x26>
 8003006:	3301      	adds	r3, #1
 8003008:	6033      	str	r3, [r6, #0]
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	0699      	lsls	r1, r3, #26
 800300e:	bf42      	ittt	mi
 8003010:	6833      	ldrmi	r3, [r6, #0]
 8003012:	3302      	addmi	r3, #2
 8003014:	6033      	strmi	r3, [r6, #0]
 8003016:	6825      	ldr	r5, [r4, #0]
 8003018:	f015 0506 	ands.w	r5, r5, #6
 800301c:	d106      	bne.n	800302c <_printf_common+0x48>
 800301e:	f104 0a19 	add.w	sl, r4, #25
 8003022:	68e3      	ldr	r3, [r4, #12]
 8003024:	6832      	ldr	r2, [r6, #0]
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	42ab      	cmp	r3, r5
 800302a:	dc26      	bgt.n	800307a <_printf_common+0x96>
 800302c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003030:	1e13      	subs	r3, r2, #0
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	bf18      	it	ne
 8003036:	2301      	movne	r3, #1
 8003038:	0692      	lsls	r2, r2, #26
 800303a:	d42b      	bmi.n	8003094 <_printf_common+0xb0>
 800303c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003040:	4649      	mov	r1, r9
 8003042:	4638      	mov	r0, r7
 8003044:	47c0      	blx	r8
 8003046:	3001      	adds	r0, #1
 8003048:	d01e      	beq.n	8003088 <_printf_common+0xa4>
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	68e5      	ldr	r5, [r4, #12]
 800304e:	6832      	ldr	r2, [r6, #0]
 8003050:	f003 0306 	and.w	r3, r3, #6
 8003054:	2b04      	cmp	r3, #4
 8003056:	bf08      	it	eq
 8003058:	1aad      	subeq	r5, r5, r2
 800305a:	68a3      	ldr	r3, [r4, #8]
 800305c:	6922      	ldr	r2, [r4, #16]
 800305e:	bf0c      	ite	eq
 8003060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003064:	2500      	movne	r5, #0
 8003066:	4293      	cmp	r3, r2
 8003068:	bfc4      	itt	gt
 800306a:	1a9b      	subgt	r3, r3, r2
 800306c:	18ed      	addgt	r5, r5, r3
 800306e:	2600      	movs	r6, #0
 8003070:	341a      	adds	r4, #26
 8003072:	42b5      	cmp	r5, r6
 8003074:	d11a      	bne.n	80030ac <_printf_common+0xc8>
 8003076:	2000      	movs	r0, #0
 8003078:	e008      	b.n	800308c <_printf_common+0xa8>
 800307a:	2301      	movs	r3, #1
 800307c:	4652      	mov	r2, sl
 800307e:	4649      	mov	r1, r9
 8003080:	4638      	mov	r0, r7
 8003082:	47c0      	blx	r8
 8003084:	3001      	adds	r0, #1
 8003086:	d103      	bne.n	8003090 <_printf_common+0xac>
 8003088:	f04f 30ff 	mov.w	r0, #4294967295
 800308c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003090:	3501      	adds	r5, #1
 8003092:	e7c6      	b.n	8003022 <_printf_common+0x3e>
 8003094:	18e1      	adds	r1, r4, r3
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	2030      	movs	r0, #48	; 0x30
 800309a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800309e:	4422      	add	r2, r4
 80030a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030a8:	3302      	adds	r3, #2
 80030aa:	e7c7      	b.n	800303c <_printf_common+0x58>
 80030ac:	2301      	movs	r3, #1
 80030ae:	4622      	mov	r2, r4
 80030b0:	4649      	mov	r1, r9
 80030b2:	4638      	mov	r0, r7
 80030b4:	47c0      	blx	r8
 80030b6:	3001      	adds	r0, #1
 80030b8:	d0e6      	beq.n	8003088 <_printf_common+0xa4>
 80030ba:	3601      	adds	r6, #1
 80030bc:	e7d9      	b.n	8003072 <_printf_common+0x8e>
	...

080030c0 <_printf_i>:
 80030c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030c4:	7e0f      	ldrb	r7, [r1, #24]
 80030c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030c8:	2f78      	cmp	r7, #120	; 0x78
 80030ca:	4691      	mov	r9, r2
 80030cc:	4680      	mov	r8, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	469a      	mov	sl, r3
 80030d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030d6:	d807      	bhi.n	80030e8 <_printf_i+0x28>
 80030d8:	2f62      	cmp	r7, #98	; 0x62
 80030da:	d80a      	bhi.n	80030f2 <_printf_i+0x32>
 80030dc:	2f00      	cmp	r7, #0
 80030de:	f000 80d8 	beq.w	8003292 <_printf_i+0x1d2>
 80030e2:	2f58      	cmp	r7, #88	; 0x58
 80030e4:	f000 80a3 	beq.w	800322e <_printf_i+0x16e>
 80030e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030f0:	e03a      	b.n	8003168 <_printf_i+0xa8>
 80030f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030f6:	2b15      	cmp	r3, #21
 80030f8:	d8f6      	bhi.n	80030e8 <_printf_i+0x28>
 80030fa:	a101      	add	r1, pc, #4	; (adr r1, 8003100 <_printf_i+0x40>)
 80030fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003100:	08003159 	.word	0x08003159
 8003104:	0800316d 	.word	0x0800316d
 8003108:	080030e9 	.word	0x080030e9
 800310c:	080030e9 	.word	0x080030e9
 8003110:	080030e9 	.word	0x080030e9
 8003114:	080030e9 	.word	0x080030e9
 8003118:	0800316d 	.word	0x0800316d
 800311c:	080030e9 	.word	0x080030e9
 8003120:	080030e9 	.word	0x080030e9
 8003124:	080030e9 	.word	0x080030e9
 8003128:	080030e9 	.word	0x080030e9
 800312c:	08003279 	.word	0x08003279
 8003130:	0800319d 	.word	0x0800319d
 8003134:	0800325b 	.word	0x0800325b
 8003138:	080030e9 	.word	0x080030e9
 800313c:	080030e9 	.word	0x080030e9
 8003140:	0800329b 	.word	0x0800329b
 8003144:	080030e9 	.word	0x080030e9
 8003148:	0800319d 	.word	0x0800319d
 800314c:	080030e9 	.word	0x080030e9
 8003150:	080030e9 	.word	0x080030e9
 8003154:	08003263 	.word	0x08003263
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	1d1a      	adds	r2, r3, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	602a      	str	r2, [r5, #0]
 8003160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003168:	2301      	movs	r3, #1
 800316a:	e0a3      	b.n	80032b4 <_printf_i+0x1f4>
 800316c:	6820      	ldr	r0, [r4, #0]
 800316e:	6829      	ldr	r1, [r5, #0]
 8003170:	0606      	lsls	r6, r0, #24
 8003172:	f101 0304 	add.w	r3, r1, #4
 8003176:	d50a      	bpl.n	800318e <_printf_i+0xce>
 8003178:	680e      	ldr	r6, [r1, #0]
 800317a:	602b      	str	r3, [r5, #0]
 800317c:	2e00      	cmp	r6, #0
 800317e:	da03      	bge.n	8003188 <_printf_i+0xc8>
 8003180:	232d      	movs	r3, #45	; 0x2d
 8003182:	4276      	negs	r6, r6
 8003184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003188:	485e      	ldr	r0, [pc, #376]	; (8003304 <_printf_i+0x244>)
 800318a:	230a      	movs	r3, #10
 800318c:	e019      	b.n	80031c2 <_printf_i+0x102>
 800318e:	680e      	ldr	r6, [r1, #0]
 8003190:	602b      	str	r3, [r5, #0]
 8003192:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003196:	bf18      	it	ne
 8003198:	b236      	sxthne	r6, r6
 800319a:	e7ef      	b.n	800317c <_printf_i+0xbc>
 800319c:	682b      	ldr	r3, [r5, #0]
 800319e:	6820      	ldr	r0, [r4, #0]
 80031a0:	1d19      	adds	r1, r3, #4
 80031a2:	6029      	str	r1, [r5, #0]
 80031a4:	0601      	lsls	r1, r0, #24
 80031a6:	d501      	bpl.n	80031ac <_printf_i+0xec>
 80031a8:	681e      	ldr	r6, [r3, #0]
 80031aa:	e002      	b.n	80031b2 <_printf_i+0xf2>
 80031ac:	0646      	lsls	r6, r0, #25
 80031ae:	d5fb      	bpl.n	80031a8 <_printf_i+0xe8>
 80031b0:	881e      	ldrh	r6, [r3, #0]
 80031b2:	4854      	ldr	r0, [pc, #336]	; (8003304 <_printf_i+0x244>)
 80031b4:	2f6f      	cmp	r7, #111	; 0x6f
 80031b6:	bf0c      	ite	eq
 80031b8:	2308      	moveq	r3, #8
 80031ba:	230a      	movne	r3, #10
 80031bc:	2100      	movs	r1, #0
 80031be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031c2:	6865      	ldr	r5, [r4, #4]
 80031c4:	60a5      	str	r5, [r4, #8]
 80031c6:	2d00      	cmp	r5, #0
 80031c8:	bfa2      	ittt	ge
 80031ca:	6821      	ldrge	r1, [r4, #0]
 80031cc:	f021 0104 	bicge.w	r1, r1, #4
 80031d0:	6021      	strge	r1, [r4, #0]
 80031d2:	b90e      	cbnz	r6, 80031d8 <_printf_i+0x118>
 80031d4:	2d00      	cmp	r5, #0
 80031d6:	d04d      	beq.n	8003274 <_printf_i+0x1b4>
 80031d8:	4615      	mov	r5, r2
 80031da:	fbb6 f1f3 	udiv	r1, r6, r3
 80031de:	fb03 6711 	mls	r7, r3, r1, r6
 80031e2:	5dc7      	ldrb	r7, [r0, r7]
 80031e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031e8:	4637      	mov	r7, r6
 80031ea:	42bb      	cmp	r3, r7
 80031ec:	460e      	mov	r6, r1
 80031ee:	d9f4      	bls.n	80031da <_printf_i+0x11a>
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d10b      	bne.n	800320c <_printf_i+0x14c>
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	07de      	lsls	r6, r3, #31
 80031f8:	d508      	bpl.n	800320c <_printf_i+0x14c>
 80031fa:	6923      	ldr	r3, [r4, #16]
 80031fc:	6861      	ldr	r1, [r4, #4]
 80031fe:	4299      	cmp	r1, r3
 8003200:	bfde      	ittt	le
 8003202:	2330      	movle	r3, #48	; 0x30
 8003204:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003208:	f105 35ff 	addle.w	r5, r5, #4294967295
 800320c:	1b52      	subs	r2, r2, r5
 800320e:	6122      	str	r2, [r4, #16]
 8003210:	f8cd a000 	str.w	sl, [sp]
 8003214:	464b      	mov	r3, r9
 8003216:	aa03      	add	r2, sp, #12
 8003218:	4621      	mov	r1, r4
 800321a:	4640      	mov	r0, r8
 800321c:	f7ff fee2 	bl	8002fe4 <_printf_common>
 8003220:	3001      	adds	r0, #1
 8003222:	d14c      	bne.n	80032be <_printf_i+0x1fe>
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	b004      	add	sp, #16
 800322a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322e:	4835      	ldr	r0, [pc, #212]	; (8003304 <_printf_i+0x244>)
 8003230:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003234:	6829      	ldr	r1, [r5, #0]
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	f851 6b04 	ldr.w	r6, [r1], #4
 800323c:	6029      	str	r1, [r5, #0]
 800323e:	061d      	lsls	r5, r3, #24
 8003240:	d514      	bpl.n	800326c <_printf_i+0x1ac>
 8003242:	07df      	lsls	r7, r3, #31
 8003244:	bf44      	itt	mi
 8003246:	f043 0320 	orrmi.w	r3, r3, #32
 800324a:	6023      	strmi	r3, [r4, #0]
 800324c:	b91e      	cbnz	r6, 8003256 <_printf_i+0x196>
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	f023 0320 	bic.w	r3, r3, #32
 8003254:	6023      	str	r3, [r4, #0]
 8003256:	2310      	movs	r3, #16
 8003258:	e7b0      	b.n	80031bc <_printf_i+0xfc>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	f043 0320 	orr.w	r3, r3, #32
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	2378      	movs	r3, #120	; 0x78
 8003264:	4828      	ldr	r0, [pc, #160]	; (8003308 <_printf_i+0x248>)
 8003266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800326a:	e7e3      	b.n	8003234 <_printf_i+0x174>
 800326c:	0659      	lsls	r1, r3, #25
 800326e:	bf48      	it	mi
 8003270:	b2b6      	uxthmi	r6, r6
 8003272:	e7e6      	b.n	8003242 <_printf_i+0x182>
 8003274:	4615      	mov	r5, r2
 8003276:	e7bb      	b.n	80031f0 <_printf_i+0x130>
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	6826      	ldr	r6, [r4, #0]
 800327c:	6961      	ldr	r1, [r4, #20]
 800327e:	1d18      	adds	r0, r3, #4
 8003280:	6028      	str	r0, [r5, #0]
 8003282:	0635      	lsls	r5, r6, #24
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	d501      	bpl.n	800328c <_printf_i+0x1cc>
 8003288:	6019      	str	r1, [r3, #0]
 800328a:	e002      	b.n	8003292 <_printf_i+0x1d2>
 800328c:	0670      	lsls	r0, r6, #25
 800328e:	d5fb      	bpl.n	8003288 <_printf_i+0x1c8>
 8003290:	8019      	strh	r1, [r3, #0]
 8003292:	2300      	movs	r3, #0
 8003294:	6123      	str	r3, [r4, #16]
 8003296:	4615      	mov	r5, r2
 8003298:	e7ba      	b.n	8003210 <_printf_i+0x150>
 800329a:	682b      	ldr	r3, [r5, #0]
 800329c:	1d1a      	adds	r2, r3, #4
 800329e:	602a      	str	r2, [r5, #0]
 80032a0:	681d      	ldr	r5, [r3, #0]
 80032a2:	6862      	ldr	r2, [r4, #4]
 80032a4:	2100      	movs	r1, #0
 80032a6:	4628      	mov	r0, r5
 80032a8:	f7fc ff9a 	bl	80001e0 <memchr>
 80032ac:	b108      	cbz	r0, 80032b2 <_printf_i+0x1f2>
 80032ae:	1b40      	subs	r0, r0, r5
 80032b0:	6060      	str	r0, [r4, #4]
 80032b2:	6863      	ldr	r3, [r4, #4]
 80032b4:	6123      	str	r3, [r4, #16]
 80032b6:	2300      	movs	r3, #0
 80032b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032bc:	e7a8      	b.n	8003210 <_printf_i+0x150>
 80032be:	6923      	ldr	r3, [r4, #16]
 80032c0:	462a      	mov	r2, r5
 80032c2:	4649      	mov	r1, r9
 80032c4:	4640      	mov	r0, r8
 80032c6:	47d0      	blx	sl
 80032c8:	3001      	adds	r0, #1
 80032ca:	d0ab      	beq.n	8003224 <_printf_i+0x164>
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	079b      	lsls	r3, r3, #30
 80032d0:	d413      	bmi.n	80032fa <_printf_i+0x23a>
 80032d2:	68e0      	ldr	r0, [r4, #12]
 80032d4:	9b03      	ldr	r3, [sp, #12]
 80032d6:	4298      	cmp	r0, r3
 80032d8:	bfb8      	it	lt
 80032da:	4618      	movlt	r0, r3
 80032dc:	e7a4      	b.n	8003228 <_printf_i+0x168>
 80032de:	2301      	movs	r3, #1
 80032e0:	4632      	mov	r2, r6
 80032e2:	4649      	mov	r1, r9
 80032e4:	4640      	mov	r0, r8
 80032e6:	47d0      	blx	sl
 80032e8:	3001      	adds	r0, #1
 80032ea:	d09b      	beq.n	8003224 <_printf_i+0x164>
 80032ec:	3501      	adds	r5, #1
 80032ee:	68e3      	ldr	r3, [r4, #12]
 80032f0:	9903      	ldr	r1, [sp, #12]
 80032f2:	1a5b      	subs	r3, r3, r1
 80032f4:	42ab      	cmp	r3, r5
 80032f6:	dcf2      	bgt.n	80032de <_printf_i+0x21e>
 80032f8:	e7eb      	b.n	80032d2 <_printf_i+0x212>
 80032fa:	2500      	movs	r5, #0
 80032fc:	f104 0619 	add.w	r6, r4, #25
 8003300:	e7f5      	b.n	80032ee <_printf_i+0x22e>
 8003302:	bf00      	nop
 8003304:	080039b9 	.word	0x080039b9
 8003308:	080039ca 	.word	0x080039ca

0800330c <_sbrk_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	4d06      	ldr	r5, [pc, #24]	; (8003328 <_sbrk_r+0x1c>)
 8003310:	2300      	movs	r3, #0
 8003312:	4604      	mov	r4, r0
 8003314:	4608      	mov	r0, r1
 8003316:	602b      	str	r3, [r5, #0]
 8003318:	f7fd fc68 	bl	8000bec <_sbrk>
 800331c:	1c43      	adds	r3, r0, #1
 800331e:	d102      	bne.n	8003326 <_sbrk_r+0x1a>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	b103      	cbz	r3, 8003326 <_sbrk_r+0x1a>
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	2000012c 	.word	0x2000012c

0800332c <__sread>:
 800332c:	b510      	push	{r4, lr}
 800332e:	460c      	mov	r4, r1
 8003330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003334:	f000 fab2 	bl	800389c <_read_r>
 8003338:	2800      	cmp	r0, #0
 800333a:	bfab      	itete	ge
 800333c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800333e:	89a3      	ldrhlt	r3, [r4, #12]
 8003340:	181b      	addge	r3, r3, r0
 8003342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003346:	bfac      	ite	ge
 8003348:	6563      	strge	r3, [r4, #84]	; 0x54
 800334a:	81a3      	strhlt	r3, [r4, #12]
 800334c:	bd10      	pop	{r4, pc}

0800334e <__swrite>:
 800334e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003352:	461f      	mov	r7, r3
 8003354:	898b      	ldrh	r3, [r1, #12]
 8003356:	05db      	lsls	r3, r3, #23
 8003358:	4605      	mov	r5, r0
 800335a:	460c      	mov	r4, r1
 800335c:	4616      	mov	r6, r2
 800335e:	d505      	bpl.n	800336c <__swrite+0x1e>
 8003360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003364:	2302      	movs	r3, #2
 8003366:	2200      	movs	r2, #0
 8003368:	f000 f9c8 	bl	80036fc <_lseek_r>
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003376:	81a3      	strh	r3, [r4, #12]
 8003378:	4632      	mov	r2, r6
 800337a:	463b      	mov	r3, r7
 800337c:	4628      	mov	r0, r5
 800337e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003382:	f000 b869 	b.w	8003458 <_write_r>

08003386 <__sseek>:
 8003386:	b510      	push	{r4, lr}
 8003388:	460c      	mov	r4, r1
 800338a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800338e:	f000 f9b5 	bl	80036fc <_lseek_r>
 8003392:	1c43      	adds	r3, r0, #1
 8003394:	89a3      	ldrh	r3, [r4, #12]
 8003396:	bf15      	itete	ne
 8003398:	6560      	strne	r0, [r4, #84]	; 0x54
 800339a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800339e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033a2:	81a3      	strheq	r3, [r4, #12]
 80033a4:	bf18      	it	ne
 80033a6:	81a3      	strhne	r3, [r4, #12]
 80033a8:	bd10      	pop	{r4, pc}

080033aa <__sclose>:
 80033aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ae:	f000 b8d3 	b.w	8003558 <_close_r>
	...

080033b4 <__swbuf_r>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	460e      	mov	r6, r1
 80033b8:	4614      	mov	r4, r2
 80033ba:	4605      	mov	r5, r0
 80033bc:	b118      	cbz	r0, 80033c6 <__swbuf_r+0x12>
 80033be:	6983      	ldr	r3, [r0, #24]
 80033c0:	b90b      	cbnz	r3, 80033c6 <__swbuf_r+0x12>
 80033c2:	f7ff fb81 	bl	8002ac8 <__sinit>
 80033c6:	4b21      	ldr	r3, [pc, #132]	; (800344c <__swbuf_r+0x98>)
 80033c8:	429c      	cmp	r4, r3
 80033ca:	d12b      	bne.n	8003424 <__swbuf_r+0x70>
 80033cc:	686c      	ldr	r4, [r5, #4]
 80033ce:	69a3      	ldr	r3, [r4, #24]
 80033d0:	60a3      	str	r3, [r4, #8]
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	071a      	lsls	r2, r3, #28
 80033d6:	d52f      	bpl.n	8003438 <__swbuf_r+0x84>
 80033d8:	6923      	ldr	r3, [r4, #16]
 80033da:	b36b      	cbz	r3, 8003438 <__swbuf_r+0x84>
 80033dc:	6923      	ldr	r3, [r4, #16]
 80033de:	6820      	ldr	r0, [r4, #0]
 80033e0:	1ac0      	subs	r0, r0, r3
 80033e2:	6963      	ldr	r3, [r4, #20]
 80033e4:	b2f6      	uxtb	r6, r6
 80033e6:	4283      	cmp	r3, r0
 80033e8:	4637      	mov	r7, r6
 80033ea:	dc04      	bgt.n	80033f6 <__swbuf_r+0x42>
 80033ec:	4621      	mov	r1, r4
 80033ee:	4628      	mov	r0, r5
 80033f0:	f000 f948 	bl	8003684 <_fflush_r>
 80033f4:	bb30      	cbnz	r0, 8003444 <__swbuf_r+0x90>
 80033f6:	68a3      	ldr	r3, [r4, #8]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	60a3      	str	r3, [r4, #8]
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	6022      	str	r2, [r4, #0]
 8003402:	701e      	strb	r6, [r3, #0]
 8003404:	6963      	ldr	r3, [r4, #20]
 8003406:	3001      	adds	r0, #1
 8003408:	4283      	cmp	r3, r0
 800340a:	d004      	beq.n	8003416 <__swbuf_r+0x62>
 800340c:	89a3      	ldrh	r3, [r4, #12]
 800340e:	07db      	lsls	r3, r3, #31
 8003410:	d506      	bpl.n	8003420 <__swbuf_r+0x6c>
 8003412:	2e0a      	cmp	r6, #10
 8003414:	d104      	bne.n	8003420 <__swbuf_r+0x6c>
 8003416:	4621      	mov	r1, r4
 8003418:	4628      	mov	r0, r5
 800341a:	f000 f933 	bl	8003684 <_fflush_r>
 800341e:	b988      	cbnz	r0, 8003444 <__swbuf_r+0x90>
 8003420:	4638      	mov	r0, r7
 8003422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <__swbuf_r+0x9c>)
 8003426:	429c      	cmp	r4, r3
 8003428:	d101      	bne.n	800342e <__swbuf_r+0x7a>
 800342a:	68ac      	ldr	r4, [r5, #8]
 800342c:	e7cf      	b.n	80033ce <__swbuf_r+0x1a>
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <__swbuf_r+0xa0>)
 8003430:	429c      	cmp	r4, r3
 8003432:	bf08      	it	eq
 8003434:	68ec      	ldreq	r4, [r5, #12]
 8003436:	e7ca      	b.n	80033ce <__swbuf_r+0x1a>
 8003438:	4621      	mov	r1, r4
 800343a:	4628      	mov	r0, r5
 800343c:	f000 f81e 	bl	800347c <__swsetup_r>
 8003440:	2800      	cmp	r0, #0
 8003442:	d0cb      	beq.n	80033dc <__swbuf_r+0x28>
 8003444:	f04f 37ff 	mov.w	r7, #4294967295
 8003448:	e7ea      	b.n	8003420 <__swbuf_r+0x6c>
 800344a:	bf00      	nop
 800344c:	08003968 	.word	0x08003968
 8003450:	08003988 	.word	0x08003988
 8003454:	08003948 	.word	0x08003948

08003458 <_write_r>:
 8003458:	b538      	push	{r3, r4, r5, lr}
 800345a:	4d07      	ldr	r5, [pc, #28]	; (8003478 <_write_r+0x20>)
 800345c:	4604      	mov	r4, r0
 800345e:	4608      	mov	r0, r1
 8003460:	4611      	mov	r1, r2
 8003462:	2200      	movs	r2, #0
 8003464:	602a      	str	r2, [r5, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	f7fd fc08 	bl	8000c7c <_write>
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	d102      	bne.n	8003476 <_write_r+0x1e>
 8003470:	682b      	ldr	r3, [r5, #0]
 8003472:	b103      	cbz	r3, 8003476 <_write_r+0x1e>
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	bd38      	pop	{r3, r4, r5, pc}
 8003478:	2000012c 	.word	0x2000012c

0800347c <__swsetup_r>:
 800347c:	4b32      	ldr	r3, [pc, #200]	; (8003548 <__swsetup_r+0xcc>)
 800347e:	b570      	push	{r4, r5, r6, lr}
 8003480:	681d      	ldr	r5, [r3, #0]
 8003482:	4606      	mov	r6, r0
 8003484:	460c      	mov	r4, r1
 8003486:	b125      	cbz	r5, 8003492 <__swsetup_r+0x16>
 8003488:	69ab      	ldr	r3, [r5, #24]
 800348a:	b913      	cbnz	r3, 8003492 <__swsetup_r+0x16>
 800348c:	4628      	mov	r0, r5
 800348e:	f7ff fb1b 	bl	8002ac8 <__sinit>
 8003492:	4b2e      	ldr	r3, [pc, #184]	; (800354c <__swsetup_r+0xd0>)
 8003494:	429c      	cmp	r4, r3
 8003496:	d10f      	bne.n	80034b8 <__swsetup_r+0x3c>
 8003498:	686c      	ldr	r4, [r5, #4]
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034a0:	0719      	lsls	r1, r3, #28
 80034a2:	d42c      	bmi.n	80034fe <__swsetup_r+0x82>
 80034a4:	06dd      	lsls	r5, r3, #27
 80034a6:	d411      	bmi.n	80034cc <__swsetup_r+0x50>
 80034a8:	2309      	movs	r3, #9
 80034aa:	6033      	str	r3, [r6, #0]
 80034ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	f04f 30ff 	mov.w	r0, #4294967295
 80034b6:	e03e      	b.n	8003536 <__swsetup_r+0xba>
 80034b8:	4b25      	ldr	r3, [pc, #148]	; (8003550 <__swsetup_r+0xd4>)
 80034ba:	429c      	cmp	r4, r3
 80034bc:	d101      	bne.n	80034c2 <__swsetup_r+0x46>
 80034be:	68ac      	ldr	r4, [r5, #8]
 80034c0:	e7eb      	b.n	800349a <__swsetup_r+0x1e>
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <__swsetup_r+0xd8>)
 80034c4:	429c      	cmp	r4, r3
 80034c6:	bf08      	it	eq
 80034c8:	68ec      	ldreq	r4, [r5, #12]
 80034ca:	e7e6      	b.n	800349a <__swsetup_r+0x1e>
 80034cc:	0758      	lsls	r0, r3, #29
 80034ce:	d512      	bpl.n	80034f6 <__swsetup_r+0x7a>
 80034d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034d2:	b141      	cbz	r1, 80034e6 <__swsetup_r+0x6a>
 80034d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034d8:	4299      	cmp	r1, r3
 80034da:	d002      	beq.n	80034e2 <__swsetup_r+0x66>
 80034dc:	4630      	mov	r0, r6
 80034de:	f000 f991 	bl	8003804 <_free_r>
 80034e2:	2300      	movs	r3, #0
 80034e4:	6363      	str	r3, [r4, #52]	; 0x34
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034ec:	81a3      	strh	r3, [r4, #12]
 80034ee:	2300      	movs	r3, #0
 80034f0:	6063      	str	r3, [r4, #4]
 80034f2:	6923      	ldr	r3, [r4, #16]
 80034f4:	6023      	str	r3, [r4, #0]
 80034f6:	89a3      	ldrh	r3, [r4, #12]
 80034f8:	f043 0308 	orr.w	r3, r3, #8
 80034fc:	81a3      	strh	r3, [r4, #12]
 80034fe:	6923      	ldr	r3, [r4, #16]
 8003500:	b94b      	cbnz	r3, 8003516 <__swsetup_r+0x9a>
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350c:	d003      	beq.n	8003516 <__swsetup_r+0x9a>
 800350e:	4621      	mov	r1, r4
 8003510:	4630      	mov	r0, r6
 8003512:	f000 f92b 	bl	800376c <__smakebuf_r>
 8003516:	89a0      	ldrh	r0, [r4, #12]
 8003518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800351c:	f010 0301 	ands.w	r3, r0, #1
 8003520:	d00a      	beq.n	8003538 <__swsetup_r+0xbc>
 8003522:	2300      	movs	r3, #0
 8003524:	60a3      	str	r3, [r4, #8]
 8003526:	6963      	ldr	r3, [r4, #20]
 8003528:	425b      	negs	r3, r3
 800352a:	61a3      	str	r3, [r4, #24]
 800352c:	6923      	ldr	r3, [r4, #16]
 800352e:	b943      	cbnz	r3, 8003542 <__swsetup_r+0xc6>
 8003530:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003534:	d1ba      	bne.n	80034ac <__swsetup_r+0x30>
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	0781      	lsls	r1, r0, #30
 800353a:	bf58      	it	pl
 800353c:	6963      	ldrpl	r3, [r4, #20]
 800353e:	60a3      	str	r3, [r4, #8]
 8003540:	e7f4      	b.n	800352c <__swsetup_r+0xb0>
 8003542:	2000      	movs	r0, #0
 8003544:	e7f7      	b.n	8003536 <__swsetup_r+0xba>
 8003546:	bf00      	nop
 8003548:	2000000c 	.word	0x2000000c
 800354c:	08003968 	.word	0x08003968
 8003550:	08003988 	.word	0x08003988
 8003554:	08003948 	.word	0x08003948

08003558 <_close_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4d06      	ldr	r5, [pc, #24]	; (8003574 <_close_r+0x1c>)
 800355c:	2300      	movs	r3, #0
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	602b      	str	r3, [r5, #0]
 8003564:	f7fd fb0d 	bl	8000b82 <_close>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_close_r+0x1a>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	b103      	cbz	r3, 8003572 <_close_r+0x1a>
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	2000012c 	.word	0x2000012c

08003578 <__sflush_r>:
 8003578:	898a      	ldrh	r2, [r1, #12]
 800357a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357e:	4605      	mov	r5, r0
 8003580:	0710      	lsls	r0, r2, #28
 8003582:	460c      	mov	r4, r1
 8003584:	d458      	bmi.n	8003638 <__sflush_r+0xc0>
 8003586:	684b      	ldr	r3, [r1, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	dc05      	bgt.n	8003598 <__sflush_r+0x20>
 800358c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	dc02      	bgt.n	8003598 <__sflush_r+0x20>
 8003592:	2000      	movs	r0, #0
 8003594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800359a:	2e00      	cmp	r6, #0
 800359c:	d0f9      	beq.n	8003592 <__sflush_r+0x1a>
 800359e:	2300      	movs	r3, #0
 80035a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035a4:	682f      	ldr	r7, [r5, #0]
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	d032      	beq.n	8003610 <__sflush_r+0x98>
 80035aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	075a      	lsls	r2, r3, #29
 80035b0:	d505      	bpl.n	80035be <__sflush_r+0x46>
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	1ac0      	subs	r0, r0, r3
 80035b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035b8:	b10b      	cbz	r3, 80035be <__sflush_r+0x46>
 80035ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035bc:	1ac0      	subs	r0, r0, r3
 80035be:	2300      	movs	r3, #0
 80035c0:	4602      	mov	r2, r0
 80035c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035c4:	6a21      	ldr	r1, [r4, #32]
 80035c6:	4628      	mov	r0, r5
 80035c8:	47b0      	blx	r6
 80035ca:	1c43      	adds	r3, r0, #1
 80035cc:	89a3      	ldrh	r3, [r4, #12]
 80035ce:	d106      	bne.n	80035de <__sflush_r+0x66>
 80035d0:	6829      	ldr	r1, [r5, #0]
 80035d2:	291d      	cmp	r1, #29
 80035d4:	d82c      	bhi.n	8003630 <__sflush_r+0xb8>
 80035d6:	4a2a      	ldr	r2, [pc, #168]	; (8003680 <__sflush_r+0x108>)
 80035d8:	40ca      	lsrs	r2, r1
 80035da:	07d6      	lsls	r6, r2, #31
 80035dc:	d528      	bpl.n	8003630 <__sflush_r+0xb8>
 80035de:	2200      	movs	r2, #0
 80035e0:	6062      	str	r2, [r4, #4]
 80035e2:	04d9      	lsls	r1, r3, #19
 80035e4:	6922      	ldr	r2, [r4, #16]
 80035e6:	6022      	str	r2, [r4, #0]
 80035e8:	d504      	bpl.n	80035f4 <__sflush_r+0x7c>
 80035ea:	1c42      	adds	r2, r0, #1
 80035ec:	d101      	bne.n	80035f2 <__sflush_r+0x7a>
 80035ee:	682b      	ldr	r3, [r5, #0]
 80035f0:	b903      	cbnz	r3, 80035f4 <__sflush_r+0x7c>
 80035f2:	6560      	str	r0, [r4, #84]	; 0x54
 80035f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035f6:	602f      	str	r7, [r5, #0]
 80035f8:	2900      	cmp	r1, #0
 80035fa:	d0ca      	beq.n	8003592 <__sflush_r+0x1a>
 80035fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003600:	4299      	cmp	r1, r3
 8003602:	d002      	beq.n	800360a <__sflush_r+0x92>
 8003604:	4628      	mov	r0, r5
 8003606:	f000 f8fd 	bl	8003804 <_free_r>
 800360a:	2000      	movs	r0, #0
 800360c:	6360      	str	r0, [r4, #52]	; 0x34
 800360e:	e7c1      	b.n	8003594 <__sflush_r+0x1c>
 8003610:	6a21      	ldr	r1, [r4, #32]
 8003612:	2301      	movs	r3, #1
 8003614:	4628      	mov	r0, r5
 8003616:	47b0      	blx	r6
 8003618:	1c41      	adds	r1, r0, #1
 800361a:	d1c7      	bne.n	80035ac <__sflush_r+0x34>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0c4      	beq.n	80035ac <__sflush_r+0x34>
 8003622:	2b1d      	cmp	r3, #29
 8003624:	d001      	beq.n	800362a <__sflush_r+0xb2>
 8003626:	2b16      	cmp	r3, #22
 8003628:	d101      	bne.n	800362e <__sflush_r+0xb6>
 800362a:	602f      	str	r7, [r5, #0]
 800362c:	e7b1      	b.n	8003592 <__sflush_r+0x1a>
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003634:	81a3      	strh	r3, [r4, #12]
 8003636:	e7ad      	b.n	8003594 <__sflush_r+0x1c>
 8003638:	690f      	ldr	r7, [r1, #16]
 800363a:	2f00      	cmp	r7, #0
 800363c:	d0a9      	beq.n	8003592 <__sflush_r+0x1a>
 800363e:	0793      	lsls	r3, r2, #30
 8003640:	680e      	ldr	r6, [r1, #0]
 8003642:	bf08      	it	eq
 8003644:	694b      	ldreq	r3, [r1, #20]
 8003646:	600f      	str	r7, [r1, #0]
 8003648:	bf18      	it	ne
 800364a:	2300      	movne	r3, #0
 800364c:	eba6 0807 	sub.w	r8, r6, r7
 8003650:	608b      	str	r3, [r1, #8]
 8003652:	f1b8 0f00 	cmp.w	r8, #0
 8003656:	dd9c      	ble.n	8003592 <__sflush_r+0x1a>
 8003658:	6a21      	ldr	r1, [r4, #32]
 800365a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800365c:	4643      	mov	r3, r8
 800365e:	463a      	mov	r2, r7
 8003660:	4628      	mov	r0, r5
 8003662:	47b0      	blx	r6
 8003664:	2800      	cmp	r0, #0
 8003666:	dc06      	bgt.n	8003676 <__sflush_r+0xfe>
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366e:	81a3      	strh	r3, [r4, #12]
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	e78e      	b.n	8003594 <__sflush_r+0x1c>
 8003676:	4407      	add	r7, r0
 8003678:	eba8 0800 	sub.w	r8, r8, r0
 800367c:	e7e9      	b.n	8003652 <__sflush_r+0xda>
 800367e:	bf00      	nop
 8003680:	20400001 	.word	0x20400001

08003684 <_fflush_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	690b      	ldr	r3, [r1, #16]
 8003688:	4605      	mov	r5, r0
 800368a:	460c      	mov	r4, r1
 800368c:	b913      	cbnz	r3, 8003694 <_fflush_r+0x10>
 800368e:	2500      	movs	r5, #0
 8003690:	4628      	mov	r0, r5
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	b118      	cbz	r0, 800369e <_fflush_r+0x1a>
 8003696:	6983      	ldr	r3, [r0, #24]
 8003698:	b90b      	cbnz	r3, 800369e <_fflush_r+0x1a>
 800369a:	f7ff fa15 	bl	8002ac8 <__sinit>
 800369e:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <_fflush_r+0x6c>)
 80036a0:	429c      	cmp	r4, r3
 80036a2:	d11b      	bne.n	80036dc <_fflush_r+0x58>
 80036a4:	686c      	ldr	r4, [r5, #4]
 80036a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ef      	beq.n	800368e <_fflush_r+0xa>
 80036ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036b0:	07d0      	lsls	r0, r2, #31
 80036b2:	d404      	bmi.n	80036be <_fflush_r+0x3a>
 80036b4:	0599      	lsls	r1, r3, #22
 80036b6:	d402      	bmi.n	80036be <_fflush_r+0x3a>
 80036b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ba:	f7ff faa3 	bl	8002c04 <__retarget_lock_acquire_recursive>
 80036be:	4628      	mov	r0, r5
 80036c0:	4621      	mov	r1, r4
 80036c2:	f7ff ff59 	bl	8003578 <__sflush_r>
 80036c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036c8:	07da      	lsls	r2, r3, #31
 80036ca:	4605      	mov	r5, r0
 80036cc:	d4e0      	bmi.n	8003690 <_fflush_r+0xc>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	059b      	lsls	r3, r3, #22
 80036d2:	d4dd      	bmi.n	8003690 <_fflush_r+0xc>
 80036d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036d6:	f7ff fa96 	bl	8002c06 <__retarget_lock_release_recursive>
 80036da:	e7d9      	b.n	8003690 <_fflush_r+0xc>
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <_fflush_r+0x70>)
 80036de:	429c      	cmp	r4, r3
 80036e0:	d101      	bne.n	80036e6 <_fflush_r+0x62>
 80036e2:	68ac      	ldr	r4, [r5, #8]
 80036e4:	e7df      	b.n	80036a6 <_fflush_r+0x22>
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <_fflush_r+0x74>)
 80036e8:	429c      	cmp	r4, r3
 80036ea:	bf08      	it	eq
 80036ec:	68ec      	ldreq	r4, [r5, #12]
 80036ee:	e7da      	b.n	80036a6 <_fflush_r+0x22>
 80036f0:	08003968 	.word	0x08003968
 80036f4:	08003988 	.word	0x08003988
 80036f8:	08003948 	.word	0x08003948

080036fc <_lseek_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4d07      	ldr	r5, [pc, #28]	; (800371c <_lseek_r+0x20>)
 8003700:	4604      	mov	r4, r0
 8003702:	4608      	mov	r0, r1
 8003704:	4611      	mov	r1, r2
 8003706:	2200      	movs	r2, #0
 8003708:	602a      	str	r2, [r5, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	f7fd fa60 	bl	8000bd0 <_lseek>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d102      	bne.n	800371a <_lseek_r+0x1e>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	b103      	cbz	r3, 800371a <_lseek_r+0x1e>
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	2000012c 	.word	0x2000012c

08003720 <__swhatbuf_r>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	460e      	mov	r6, r1
 8003724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003728:	2900      	cmp	r1, #0
 800372a:	b096      	sub	sp, #88	; 0x58
 800372c:	4614      	mov	r4, r2
 800372e:	461d      	mov	r5, r3
 8003730:	da08      	bge.n	8003744 <__swhatbuf_r+0x24>
 8003732:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	602a      	str	r2, [r5, #0]
 800373a:	061a      	lsls	r2, r3, #24
 800373c:	d410      	bmi.n	8003760 <__swhatbuf_r+0x40>
 800373e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003742:	e00e      	b.n	8003762 <__swhatbuf_r+0x42>
 8003744:	466a      	mov	r2, sp
 8003746:	f000 f8bb 	bl	80038c0 <_fstat_r>
 800374a:	2800      	cmp	r0, #0
 800374c:	dbf1      	blt.n	8003732 <__swhatbuf_r+0x12>
 800374e:	9a01      	ldr	r2, [sp, #4]
 8003750:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003754:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003758:	425a      	negs	r2, r3
 800375a:	415a      	adcs	r2, r3
 800375c:	602a      	str	r2, [r5, #0]
 800375e:	e7ee      	b.n	800373e <__swhatbuf_r+0x1e>
 8003760:	2340      	movs	r3, #64	; 0x40
 8003762:	2000      	movs	r0, #0
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	b016      	add	sp, #88	; 0x58
 8003768:	bd70      	pop	{r4, r5, r6, pc}
	...

0800376c <__smakebuf_r>:
 800376c:	898b      	ldrh	r3, [r1, #12]
 800376e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003770:	079d      	lsls	r5, r3, #30
 8003772:	4606      	mov	r6, r0
 8003774:	460c      	mov	r4, r1
 8003776:	d507      	bpl.n	8003788 <__smakebuf_r+0x1c>
 8003778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	6123      	str	r3, [r4, #16]
 8003780:	2301      	movs	r3, #1
 8003782:	6163      	str	r3, [r4, #20]
 8003784:	b002      	add	sp, #8
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	ab01      	add	r3, sp, #4
 800378a:	466a      	mov	r2, sp
 800378c:	f7ff ffc8 	bl	8003720 <__swhatbuf_r>
 8003790:	9900      	ldr	r1, [sp, #0]
 8003792:	4605      	mov	r5, r0
 8003794:	4630      	mov	r0, r6
 8003796:	f7ff fa57 	bl	8002c48 <_malloc_r>
 800379a:	b948      	cbnz	r0, 80037b0 <__smakebuf_r+0x44>
 800379c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037a0:	059a      	lsls	r2, r3, #22
 80037a2:	d4ef      	bmi.n	8003784 <__smakebuf_r+0x18>
 80037a4:	f023 0303 	bic.w	r3, r3, #3
 80037a8:	f043 0302 	orr.w	r3, r3, #2
 80037ac:	81a3      	strh	r3, [r4, #12]
 80037ae:	e7e3      	b.n	8003778 <__smakebuf_r+0xc>
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <__smakebuf_r+0x7c>)
 80037b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	6020      	str	r0, [r4, #0]
 80037b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	9b00      	ldr	r3, [sp, #0]
 80037c0:	6163      	str	r3, [r4, #20]
 80037c2:	9b01      	ldr	r3, [sp, #4]
 80037c4:	6120      	str	r0, [r4, #16]
 80037c6:	b15b      	cbz	r3, 80037e0 <__smakebuf_r+0x74>
 80037c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037cc:	4630      	mov	r0, r6
 80037ce:	f000 f889 	bl	80038e4 <_isatty_r>
 80037d2:	b128      	cbz	r0, 80037e0 <__smakebuf_r+0x74>
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	f023 0303 	bic.w	r3, r3, #3
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	81a3      	strh	r3, [r4, #12]
 80037e0:	89a0      	ldrh	r0, [r4, #12]
 80037e2:	4305      	orrs	r5, r0
 80037e4:	81a5      	strh	r5, [r4, #12]
 80037e6:	e7cd      	b.n	8003784 <__smakebuf_r+0x18>
 80037e8:	08002a61 	.word	0x08002a61

080037ec <__malloc_lock>:
 80037ec:	4801      	ldr	r0, [pc, #4]	; (80037f4 <__malloc_lock+0x8>)
 80037ee:	f7ff ba09 	b.w	8002c04 <__retarget_lock_acquire_recursive>
 80037f2:	bf00      	nop
 80037f4:	20000120 	.word	0x20000120

080037f8 <__malloc_unlock>:
 80037f8:	4801      	ldr	r0, [pc, #4]	; (8003800 <__malloc_unlock+0x8>)
 80037fa:	f7ff ba04 	b.w	8002c06 <__retarget_lock_release_recursive>
 80037fe:	bf00      	nop
 8003800:	20000120 	.word	0x20000120

08003804 <_free_r>:
 8003804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003806:	2900      	cmp	r1, #0
 8003808:	d044      	beq.n	8003894 <_free_r+0x90>
 800380a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800380e:	9001      	str	r0, [sp, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f1a1 0404 	sub.w	r4, r1, #4
 8003816:	bfb8      	it	lt
 8003818:	18e4      	addlt	r4, r4, r3
 800381a:	f7ff ffe7 	bl	80037ec <__malloc_lock>
 800381e:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <_free_r+0x94>)
 8003820:	9801      	ldr	r0, [sp, #4]
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	b933      	cbnz	r3, 8003834 <_free_r+0x30>
 8003826:	6063      	str	r3, [r4, #4]
 8003828:	6014      	str	r4, [r2, #0]
 800382a:	b003      	add	sp, #12
 800382c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003830:	f7ff bfe2 	b.w	80037f8 <__malloc_unlock>
 8003834:	42a3      	cmp	r3, r4
 8003836:	d908      	bls.n	800384a <_free_r+0x46>
 8003838:	6825      	ldr	r5, [r4, #0]
 800383a:	1961      	adds	r1, r4, r5
 800383c:	428b      	cmp	r3, r1
 800383e:	bf01      	itttt	eq
 8003840:	6819      	ldreq	r1, [r3, #0]
 8003842:	685b      	ldreq	r3, [r3, #4]
 8003844:	1949      	addeq	r1, r1, r5
 8003846:	6021      	streq	r1, [r4, #0]
 8003848:	e7ed      	b.n	8003826 <_free_r+0x22>
 800384a:	461a      	mov	r2, r3
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	b10b      	cbz	r3, 8003854 <_free_r+0x50>
 8003850:	42a3      	cmp	r3, r4
 8003852:	d9fa      	bls.n	800384a <_free_r+0x46>
 8003854:	6811      	ldr	r1, [r2, #0]
 8003856:	1855      	adds	r5, r2, r1
 8003858:	42a5      	cmp	r5, r4
 800385a:	d10b      	bne.n	8003874 <_free_r+0x70>
 800385c:	6824      	ldr	r4, [r4, #0]
 800385e:	4421      	add	r1, r4
 8003860:	1854      	adds	r4, r2, r1
 8003862:	42a3      	cmp	r3, r4
 8003864:	6011      	str	r1, [r2, #0]
 8003866:	d1e0      	bne.n	800382a <_free_r+0x26>
 8003868:	681c      	ldr	r4, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	6053      	str	r3, [r2, #4]
 800386e:	4421      	add	r1, r4
 8003870:	6011      	str	r1, [r2, #0]
 8003872:	e7da      	b.n	800382a <_free_r+0x26>
 8003874:	d902      	bls.n	800387c <_free_r+0x78>
 8003876:	230c      	movs	r3, #12
 8003878:	6003      	str	r3, [r0, #0]
 800387a:	e7d6      	b.n	800382a <_free_r+0x26>
 800387c:	6825      	ldr	r5, [r4, #0]
 800387e:	1961      	adds	r1, r4, r5
 8003880:	428b      	cmp	r3, r1
 8003882:	bf04      	itt	eq
 8003884:	6819      	ldreq	r1, [r3, #0]
 8003886:	685b      	ldreq	r3, [r3, #4]
 8003888:	6063      	str	r3, [r4, #4]
 800388a:	bf04      	itt	eq
 800388c:	1949      	addeq	r1, r1, r5
 800388e:	6021      	streq	r1, [r4, #0]
 8003890:	6054      	str	r4, [r2, #4]
 8003892:	e7ca      	b.n	800382a <_free_r+0x26>
 8003894:	b003      	add	sp, #12
 8003896:	bd30      	pop	{r4, r5, pc}
 8003898:	20000124 	.word	0x20000124

0800389c <_read_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4d07      	ldr	r5, [pc, #28]	; (80038bc <_read_r+0x20>)
 80038a0:	4604      	mov	r4, r0
 80038a2:	4608      	mov	r0, r1
 80038a4:	4611      	mov	r1, r2
 80038a6:	2200      	movs	r2, #0
 80038a8:	602a      	str	r2, [r5, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f7fd f94c 	bl	8000b48 <_read>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d102      	bne.n	80038ba <_read_r+0x1e>
 80038b4:	682b      	ldr	r3, [r5, #0]
 80038b6:	b103      	cbz	r3, 80038ba <_read_r+0x1e>
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	2000012c 	.word	0x2000012c

080038c0 <_fstat_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d07      	ldr	r5, [pc, #28]	; (80038e0 <_fstat_r+0x20>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	602b      	str	r3, [r5, #0]
 80038ce:	f7fd f964 	bl	8000b9a <_fstat>
 80038d2:	1c43      	adds	r3, r0, #1
 80038d4:	d102      	bne.n	80038dc <_fstat_r+0x1c>
 80038d6:	682b      	ldr	r3, [r5, #0]
 80038d8:	b103      	cbz	r3, 80038dc <_fstat_r+0x1c>
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	bd38      	pop	{r3, r4, r5, pc}
 80038de:	bf00      	nop
 80038e0:	2000012c 	.word	0x2000012c

080038e4 <_isatty_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4d06      	ldr	r5, [pc, #24]	; (8003900 <_isatty_r+0x1c>)
 80038e8:	2300      	movs	r3, #0
 80038ea:	4604      	mov	r4, r0
 80038ec:	4608      	mov	r0, r1
 80038ee:	602b      	str	r3, [r5, #0]
 80038f0:	f7fd f963 	bl	8000bba <_isatty>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_isatty_r+0x1a>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_isatty_r+0x1a>
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	2000012c 	.word	0x2000012c

08003904 <_init>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr

08003910 <_fini>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr
